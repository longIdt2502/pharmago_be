// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (username, hashed_password, full_name, email, type, media)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, username, hashed_password, full_name, email, type, media, password_changed_at, created_at
`

type CreateAccountParams struct {
	Username       sql.NullString `json:"username"`
	HashedPassword string         `json:"hashed_password"`
	FullName       string         `json:"full_name"`
	Email          string         `json:"email"`
	Type           int64          `json:"type"`
	Media          sql.NullInt64  `json:"media"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Type,
		arg.Media,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.Media,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, hashed_password, full_name, email, type, media, password_changed_at, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.Media,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
