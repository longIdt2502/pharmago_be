// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (username, hashed_password, full_name, email, type)
VALUES ($1, $2, $3, $4, $5) RETURNING id, username, hashed_password, full_name, email, type, is_verify, password_changed_at, created_at
`

type CreateAccountParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Type           int32  `json:"type"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Type,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.IsVerify,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, hashed_password, full_name, email, type, is_verify, password_changed_at, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.IsVerify,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByUseName = `-- name: GetAccountByUseName :one
SELECT id, username, hashed_password, full_name, email, type, is_verify, password_changed_at, created_at FROM accounts
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccountByUseName(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUseName, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.IsVerify,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
    is_verify = COALESCE($1, is_verify)
WHERE
    id = $2
    OR username = $3
RETURNING id, username, hashed_password, full_name, email, type, is_verify, password_changed_at, created_at
`

type UpdateAccountParams struct {
	IsVerify sql.NullBool   `json:"is_verify"`
	ID       sql.NullInt32  `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.IsVerify, arg.ID, arg.Username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Type,
		&i.IsVerify,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
