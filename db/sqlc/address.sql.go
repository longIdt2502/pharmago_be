// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (
    lat, lng, province, district, ward, title, user_created
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, lat, lng, title, user_created, created_at, province, district, ward
`

type CreateAddressParams struct {
	Lat         float64        `json:"lat"`
	Lng         float64        `json:"lng"`
	Province    sql.NullString `json:"province"`
	District    sql.NullString `json:"district"`
	Ward        sql.NullString `json:"ward"`
	Title       string         `json:"title"`
	UserCreated int64          `json:"user_created"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Lat,
		arg.Lng,
		arg.Province,
		arg.District,
		arg.Ward,
		arg.Title,
		arg.UserCreated,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.Title,
		&i.UserCreated,
		&i.CreatedAt,
		&i.Province,
		&i.District,
		&i.Ward,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, lat, lng, title, user_created, created_at, province, district, ward FROM address
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.Title,
		&i.UserCreated,
		&i.CreatedAt,
		&i.Province,
		&i.District,
		&i.Ward,
	)
	return i, err
}

const getDistrict = `-- name: GetDistrict :many
SELECT code, name, name_en, full_name, full_name_en, code_name, province_code, administrative_unit_id FROM districts
WHERE province_code = $1
`

func (q *Queries) GetDistrict(ctx context.Context, provinceCode sql.NullString) ([]District, error) {
	rows, err := q.db.QueryContext(ctx, getDistrict, provinceCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []District{}
	for rows.Next() {
		var i District
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.NameEn,
			&i.FullName,
			&i.FullNameEn,
			&i.CodeName,
			&i.ProvinceCode,
			&i.AdministrativeUnitID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistrictByCode = `-- name: GetDistrictByCode :one
SELECT code, name, name_en, full_name, full_name_en, code_name, province_code, administrative_unit_id FROM districts
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetDistrictByCode(ctx context.Context, code string) (District, error) {
	row := q.db.QueryRowContext(ctx, getDistrictByCode, code)
	var i District
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.NameEn,
		&i.FullName,
		&i.FullNameEn,
		&i.CodeName,
		&i.ProvinceCode,
		&i.AdministrativeUnitID,
	)
	return i, err
}

const getProvince = `-- name: GetProvince :many
SELECT code, name, name_en, full_name, full_name_en, code_name, administrative_unit_id, administrative_region_id FROM provinces
`

func (q *Queries) GetProvince(ctx context.Context) ([]Province, error) {
	rows, err := q.db.QueryContext(ctx, getProvince)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Province{}
	for rows.Next() {
		var i Province
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.NameEn,
			&i.FullName,
			&i.FullNameEn,
			&i.CodeName,
			&i.AdministrativeUnitID,
			&i.AdministrativeRegionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvinceByCode = `-- name: GetProvinceByCode :one
SELECT code, name, name_en, full_name, full_name_en, code_name, administrative_unit_id, administrative_region_id FROM provinces
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetProvinceByCode(ctx context.Context, code string) (Province, error) {
	row := q.db.QueryRowContext(ctx, getProvinceByCode, code)
	var i Province
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.NameEn,
		&i.FullName,
		&i.FullNameEn,
		&i.CodeName,
		&i.AdministrativeUnitID,
		&i.AdministrativeRegionID,
	)
	return i, err
}

const getWard = `-- name: GetWard :many
SELECT code, name, name_en, full_name, full_name_en, code_name, district_code, administrative_unit_id FROM wards
WHERE district_code = $1
`

func (q *Queries) GetWard(ctx context.Context, districtCode sql.NullString) ([]Ward, error) {
	rows, err := q.db.QueryContext(ctx, getWard, districtCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ward{}
	for rows.Next() {
		var i Ward
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.NameEn,
			&i.FullName,
			&i.FullNameEn,
			&i.CodeName,
			&i.DistrictCode,
			&i.AdministrativeUnitID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWardByCode = `-- name: GetWardByCode :one
SELECT code, name, name_en, full_name, full_name_en, code_name, district_code, administrative_unit_id FROM wards
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetWardByCode(ctx context.Context, code string) (Ward, error) {
	row := q.db.QueryRowContext(ctx, getWardByCode, code)
	var i Ward
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.NameEn,
		&i.FullName,
		&i.FullNameEn,
		&i.CodeName,
		&i.DistrictCode,
		&i.AdministrativeUnitID,
	)
	return i, err
}
