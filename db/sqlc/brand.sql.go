// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: brand.sql

package db

import (
	"context"
	"database/sql"
)

const getListBrand = `-- name: GetListBrand :many
SELECT id, code, name, user_created, created_at, company FROM product_brand
WHERE company = $1::int
AND (
    name ILIKE '%' || COALESCE($2::varchar, '') || '%' OR
    code ILIKE '%' || COALESCE($2::varchar, '') || '%'
)
ORDER BY -id
LIMIT COALESCE($4::int, 10)
OFFSET (COALESCE($3::int, 1) - 1) * COALESCE($4::int, 10)
`

type GetListBrandParams struct {
	Company sql.NullInt32  `json:"company"`
	Search  sql.NullString `json:"search"`
	Page    sql.NullInt32  `json:"page"`
	Limit   sql.NullInt32  `json:"limit"`
}

func (q *Queries) GetListBrand(ctx context.Context, arg GetListBrandParams) ([]ProductBrand, error) {
	rows, err := q.db.QueryContext(ctx, getListBrand,
		arg.Company,
		arg.Search,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductBrand{}
	for rows.Next() {
		var i ProductBrand
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.UserCreated,
			&i.CreatedAt,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
