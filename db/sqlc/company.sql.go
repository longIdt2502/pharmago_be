// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    name, code, tax_code, phone, description, address, owner
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, code, tax_code, phone, description, address, created_at, owner
`

type CreateCompanyParams struct {
	Name        string         `json:"name"`
	Code        string         `json:"code"`
	TaxCode     sql.NullString `json:"tax_code"`
	Phone       sql.NullString `json:"phone"`
	Description sql.NullString `json:"description"`
	Address     sql.NullInt32  `json:"address"`
	Owner       int32          `json:"owner"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Code,
		arg.TaxCode,
		arg.Phone,
		arg.Description,
		arg.Address,
		arg.Owner,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.TaxCode,
		&i.Phone,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
		&i.Owner,
	)
	return i, err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, code, tax_code, phone, description, address, created_at, owner FROM companies
WHERE owner = $1::int AND
    (name ILIKE COALESCE($2::varchar, '%') OR
    phone ILIKE COALESCE($2::varchar, '%'))
ORDER BY -id
LIMIT COALESCE($4::int, 10)
OFFSET (COALESCE($3::int, 1) - 1) * COALESCE($4::int, 10)
`

type GetCompaniesParams struct {
	Owner  sql.NullInt32  `json:"owner"`
	Search sql.NullString `json:"search"`
	Page   sql.NullInt32  `json:"page"`
	Limit  sql.NullInt32  `json:"limit"`
}

func (q *Queries) GetCompanies(ctx context.Context, arg GetCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies,
		arg.Owner,
		arg.Search,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.TaxCode,
			&i.Phone,
			&i.Description,
			&i.Address,
			&i.CreatedAt,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
