// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: payment.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    code, must_paid, had_paid, need_pay
) VALUES (
    $1, $2, $3, $4
) RETURNING id, code, must_paid, had_paid, need_pay
`

type CreatePaymentParams struct {
	Code     string  `json:"code"`
	MustPaid float64 `json:"must_paid"`
	HadPaid  float64 `json:"had_paid"`
	NeedPay  float64 `json:"need_pay"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.Code,
		arg.MustPaid,
		arg.HadPaid,
		arg.NeedPay,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.MustPaid,
		&i.HadPaid,
		&i.NeedPay,
	)
	return i, err
}

const createPaymentItem = `-- name: CreatePaymentItem :one
INSERT INTO payment_items (
    type, value, is_paid, payment, extra_note
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, type, value, is_paid, payment, extra_note
`

type CreatePaymentItemParams struct {
	Type      string         `json:"type"`
	Value     float64        `json:"value"`
	IsPaid    bool           `json:"is_paid"`
	Payment   int32          `json:"payment"`
	ExtraNote sql.NullString `json:"extra_note"`
}

func (q *Queries) CreatePaymentItem(ctx context.Context, arg CreatePaymentItemParams) (PaymentItem, error) {
	row := q.db.QueryRowContext(ctx, createPaymentItem,
		arg.Type,
		arg.Value,
		arg.IsPaid,
		arg.Payment,
		arg.ExtraNote,
	)
	var i PaymentItem
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.IsPaid,
		&i.Payment,
		&i.ExtraNote,
	)
	return i, err
}

const detailPayment = `-- name: DetailPayment :one
SELECT id, code, must_paid, had_paid, need_pay FROM payments
WHERE id = $1
LIMIT 1
`

func (q *Queries) DetailPayment(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, detailPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.MustPaid,
		&i.HadPaid,
		&i.NeedPay,
	)
	return i, err
}

const listPaymentItem = `-- name: ListPaymentItem :many
SELECT pi.id, type, value, is_paid, payment, extra_note, pit.id, code, title FROM payment_items pi
JOIN payment_item_types pit ON pi.type = pit.code
WHERE payment = $1
`

type ListPaymentItemRow struct {
	ID        int32          `json:"id"`
	Type      string         `json:"type"`
	Value     float64        `json:"value"`
	IsPaid    bool           `json:"is_paid"`
	Payment   int32          `json:"payment"`
	ExtraNote sql.NullString `json:"extra_note"`
	ID_2      int32          `json:"id_2"`
	Code      string         `json:"code"`
	Title     string         `json:"title"`
}

func (q *Queries) ListPaymentItem(ctx context.Context, payment int32) ([]ListPaymentItemRow, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentItem, payment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentItemRow{}
	for rows.Next() {
		var i ListPaymentItemRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Value,
			&i.IsPaid,
			&i.Payment,
			&i.ExtraNote,
			&i.ID_2,
			&i.Code,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paymentOrderByMedicalBill = `-- name: PaymentOrderByMedicalBill :one
SELECT SUM(p.must_paid) AS total_must_paid, 
        SUM(p.had_paid) AS total_had_paid, 
        SUM(p.need_pay) AS total_need_pay
    FROM medical_bill_order_sell mbos
JOIN orders o ON o.id = mbos.order
JOIN payments p ON p.id = o.payment
WHERE mbos.uuid = $1::uuid
GROUP BY mbos.uuid
`

type PaymentOrderByMedicalBillRow struct {
	TotalMustPaid int64 `json:"total_must_paid"`
	TotalHadPaid  int64 `json:"total_had_paid"`
	TotalNeedPay  int64 `json:"total_need_pay"`
}

func (q *Queries) PaymentOrderByMedicalBill(ctx context.Context, argUuid uuid.UUID) (PaymentOrderByMedicalBillRow, error) {
	row := q.db.QueryRowContext(ctx, paymentOrderByMedicalBill, argUuid)
	var i PaymentOrderByMedicalBillRow
	err := row.Scan(&i.TotalMustPaid, &i.TotalHadPaid, &i.TotalNeedPay)
	return i, err
}

const paymentOrderServiceByMedicalBill = `-- name: PaymentOrderServiceByMedicalBill :one
SELECT SUM(p.must_paid) AS total_must_paid, 
        SUM(p.had_paid) AS total_had_paid, 
        SUM(p.need_pay) AS total_need_pay
    FROM appointment_schedule_service ass
JOIN orders o ON o.id = ass.order_service
JOIN payments p ON p.id = o.payment
WHERE ass.mb_uuid = $1::uuid
GROUP BY ass.mb_uuid
`

type PaymentOrderServiceByMedicalBillRow struct {
	TotalMustPaid int64 `json:"total_must_paid"`
	TotalHadPaid  int64 `json:"total_had_paid"`
	TotalNeedPay  int64 `json:"total_need_pay"`
}

func (q *Queries) PaymentOrderServiceByMedicalBill(ctx context.Context, argUuid uuid.UUID) (PaymentOrderServiceByMedicalBillRow, error) {
	row := q.db.QueryRowContext(ctx, paymentOrderServiceByMedicalBill, argUuid)
	var i PaymentOrderServiceByMedicalBillRow
	err := row.Scan(&i.TotalMustPaid, &i.TotalHadPaid, &i.TotalNeedPay)
	return i, err
}
