// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: payment.sql

package db

import (
	"context"
	"database/sql"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    code, must_paid, had_paid, need_pay
) VALUES (
    $1, $2, $3, $4
) RETURNING id, code, must_paid, had_paid, need_pay
`

type CreatePaymentParams struct {
	Code     string  `json:"code"`
	MustPaid float64 `json:"must_paid"`
	HadPaid  float64 `json:"had_paid"`
	NeedPay  float64 `json:"need_pay"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.Code,
		arg.MustPaid,
		arg.HadPaid,
		arg.NeedPay,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.MustPaid,
		&i.HadPaid,
		&i.NeedPay,
	)
	return i, err
}

const createPaymentItem = `-- name: CreatePaymentItem :one
INSERT INTO payment_items (
    type, value, is_paid, payment, extra_note
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, type, value, is_paid, payment, extra_note
`

type CreatePaymentItemParams struct {
	Type      string         `json:"type"`
	Value     float64        `json:"value"`
	IsPaid    bool           `json:"is_paid"`
	Payment   int32          `json:"payment"`
	ExtraNote sql.NullString `json:"extra_note"`
}

func (q *Queries) CreatePaymentItem(ctx context.Context, arg CreatePaymentItemParams) (PaymentItem, error) {
	row := q.db.QueryRowContext(ctx, createPaymentItem,
		arg.Type,
		arg.Value,
		arg.IsPaid,
		arg.Payment,
		arg.ExtraNote,
	)
	var i PaymentItem
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.IsPaid,
		&i.Payment,
		&i.ExtraNote,
	)
	return i, err
}
