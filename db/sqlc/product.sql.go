// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countProduct = `-- name: CountProduct :many
SELECT active, COUNT(active) AS total FROM products
WHERE company = $1
GROUP BY active
`

type CountProductRow struct {
	Active bool  `json:"active"`
	Total  int64 `json:"total"`
}

func (q *Queries) CountProduct(ctx context.Context, company int32) ([]CountProductRow, error) {
	rows, err := q.db.QueryContext(ctx, countProduct, company)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CountProductRow{}
	for rows.Next() {
		var i CountProductRow
		if err := rows.Scan(&i.Active, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredient (
    name, weight, unit, product
) values (
    $1::varchar, $2::float, $3::varchar, $4::int
) RETURNING id, name, weight, unit, product
`

type CreateIngredientParams struct {
	Name    string        `json:"name"`
	Weight  float64       `json:"weight"`
	Unit    string        `json:"unit"`
	Product sql.NullInt32 `json:"product"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient,
		arg.Name,
		arg.Weight,
		arg.Unit,
		arg.Product,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Weight,
		&i.Unit,
		&i.Product,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name, code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh,
    cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, cong_ty_sx, cong_ty_dk,
    company, user_created, user_updated, phan_loai, dang_bao_che, tieu_chuan_sx
) values (
    $1::varchar, $2::varchar, $3::int, $4::int, $5::int,
    $6::int, $7::varchar, $8::varchar, $9::varchar,
    $10::varchar, $11::varchar, $12::varchar, $13::varchar,
    $14::varchar, $15::varchar, $16::varchar, $17::varchar,
    $18::int, $19::int, $20::int,
    $21::int, $22::int, $23::varchar, $24::varchar, $25::varchar
) RETURNING id, name, code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh, cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, phan_loai, dang_bao_che, tieu_chuan_sx, cong_ty_sx, cong_ty_dk, active, company, user_created, user_updated, updated_at, created_at
`

type CreateProductParams struct {
	Name            string         `json:"name"`
	Code            string         `json:"code"`
	ProductCategory sql.NullInt32  `json:"product_category"`
	Type            sql.NullInt32  `json:"type"`
	Brand           sql.NullInt32  `json:"brand"`
	Unit            int32          `json:"unit"`
	Taduoc          sql.NullString `json:"taduoc"`
	Nongdo          sql.NullString `json:"nongdo"`
	Lieudung        sql.NullString `json:"lieudung"`
	Chidinh         sql.NullString `json:"chidinh"`
	Chongchidinh    sql.NullString `json:"chongchidinh"`
	Congdung        sql.NullString `json:"congdung"`
	Tacdungphu      sql.NullString `json:"tacdungphu"`
	Thantrong       sql.NullString `json:"thantrong"`
	Tuongtac        sql.NullString `json:"tuongtac"`
	Baoquan         sql.NullString `json:"baoquan"`
	Donggoi         sql.NullString `json:"donggoi"`
	Congtysx        sql.NullInt32  `json:"congtysx"`
	Congtydk        sql.NullInt32  `json:"congtydk"`
	Company         int32          `json:"company"`
	UserCreated     int32          `json:"user_created"`
	UserUpdated     int32          `json:"user_updated"`
	Phanloai        sql.NullString `json:"phanloai"`
	Dangbaoche      sql.NullString `json:"dangbaoche"`
	Tieuchuansx     sql.NullString `json:"tieuchuansx"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Code,
		arg.ProductCategory,
		arg.Type,
		arg.Brand,
		arg.Unit,
		arg.Taduoc,
		arg.Nongdo,
		arg.Lieudung,
		arg.Chidinh,
		arg.Chongchidinh,
		arg.Congdung,
		arg.Tacdungphu,
		arg.Thantrong,
		arg.Tuongtac,
		arg.Baoquan,
		arg.Donggoi,
		arg.Congtysx,
		arg.Congtydk,
		arg.Company,
		arg.UserCreated,
		arg.UserUpdated,
		arg.Phanloai,
		arg.Dangbaoche,
		arg.Tieuchuansx,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.ProductCategory,
		&i.Type,
		&i.Brand,
		&i.Unit,
		&i.TaDuoc,
		&i.NongDo,
		&i.LieuDung,
		&i.ChiDinh,
		&i.ChongChiDinh,
		&i.CongDung,
		&i.TacDungPhu,
		&i.ThanTrong,
		&i.TuongTac,
		&i.BaoQuan,
		&i.DongGoi,
		&i.PhanLoai,
		&i.DangBaoChe,
		&i.TieuChuanSx,
		&i.CongTySx,
		&i.CongTyDk,
		&i.Active,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createProductMedia = `-- name: CreateProductMedia :one
INSERT INTO product_media (
    product, media
) VALUES ($1, $2) RETURNING id, product, media
`

type CreateProductMediaParams struct {
	Product int32 `json:"product"`
	Media   int32 `json:"media"`
}

func (q *Queries) CreateProductMedia(ctx context.Context, arg CreateProductMediaParams) (ProductMedium, error) {
	row := q.db.QueryRowContext(ctx, createProductMedia, arg.Product, arg.Media)
	var i ProductMedium
	err := row.Scan(&i.ID, &i.Product, &i.Media)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (
    name, sell_price, import_price, weight, weight_unit, user_created, user_updated
) values (
    $1::varchar, $2::float, $3::float, $4::float,
    $5::varchar, $6::int, $7::int
) RETURNING id, name, sell_price, import_price, weight, weight_unit, user_created, user_updated, updated_at, created_at
`

type CreateUnitParams struct {
	Name        string          `json:"name"`
	SellPrice   float64         `json:"sell_price"`
	ImportPrice float64         `json:"import_price"`
	Weight      sql.NullFloat64 `json:"weight"`
	WeightUnit  sql.NullString  `json:"weight_unit"`
	UserCreated int32           `json:"user_created"`
	UserUpdated int32           `json:"user_updated"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, createUnit,
		arg.Name,
		arg.SellPrice,
		arg.ImportPrice,
		arg.Weight,
		arg.WeightUnit,
		arg.UserCreated,
		arg.UserUpdated,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SellPrice,
		&i.ImportPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUnitChange = `-- name: CreateUnitChange :one
INSERT INTO unit_changes (
    name, value, sell_price, unit, user_created, user_updated
) values (
    $1::varchar, $2::int, $3::float, $4::int,
    $5::int, $6::int
) RETURNING id, name, value, sell_price, unit, user_created, user_updated, updated_at, created_at
`

type CreateUnitChangeParams struct {
	Name        string        `json:"name"`
	Value       int32         `json:"value"`
	SellPrice   float64       `json:"sell_price"`
	Unit        sql.NullInt32 `json:"unit"`
	UserCreated int32         `json:"user_created"`
	UserUpdated int32         `json:"user_updated"`
}

func (q *Queries) CreateUnitChange(ctx context.Context, arg CreateUnitChangeParams) (UnitChange, error) {
	row := q.db.QueryRowContext(ctx, createUnitChange,
		arg.Name,
		arg.Value,
		arg.SellPrice,
		arg.Unit,
		arg.UserCreated,
		arg.UserUpdated,
	)
	var i UnitChange
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.SellPrice,
		&i.Unit,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createVariant = `-- name: CreateVariant :one
INSERT INTO variants (
    name, code, barcode, vat, decision_number, register_number, longevity, product, user_created, user_updated, initial_inventory, real_inventory
) values (
    $1::varchar, $2::varchar, $3::varchar, $4::float,
    $5::varchar, $6::varchar, $7::varchar,
    $8::int, $9::int, $10::int, $11::int, $12::int
) RETURNING id, name, code, barcode, decision_number, register_number, longevity, vat, product, user_created, user_updated, updated_at, created_at, initial_inventory, real_inventory
`

type CreateVariantParams struct {
	Name             string          `json:"name"`
	Code             string          `json:"code"`
	Barcode          sql.NullString  `json:"barcode"`
	Vat              sql.NullFloat64 `json:"vat"`
	DecisionNumber   sql.NullString  `json:"decision_number"`
	RegisterNumber   sql.NullString  `json:"register_number"`
	Longevity        sql.NullString  `json:"longevity"`
	Product          int32           `json:"product"`
	UserCreated      int32           `json:"user_created"`
	UserUpdated      int32           `json:"user_updated"`
	InitialInventory int32           `json:"initial_inventory"`
	RealInventory    int32           `json:"real_inventory"`
}

func (q *Queries) CreateVariant(ctx context.Context, arg CreateVariantParams) (Variant, error) {
	row := q.db.QueryRowContext(ctx, createVariant,
		arg.Name,
		arg.Code,
		arg.Barcode,
		arg.Vat,
		arg.DecisionNumber,
		arg.RegisterNumber,
		arg.Longevity,
		arg.Product,
		arg.UserCreated,
		arg.UserUpdated,
		arg.InitialInventory,
		arg.RealInventory,
	)
	var i Variant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Barcode,
		&i.DecisionNumber,
		&i.RegisterNumber,
		&i.Longevity,
		&i.Vat,
		&i.Product,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.InitialInventory,
		&i.RealInventory,
	)
	return i, err
}

const createVariantMedia = `-- name: CreateVariantMedia :one
INSERT INTO variant_media (
    variant, media
) VALUES ($1, $2) RETURNING id, variant, media
`

type CreateVariantMediaParams struct {
	Variant int32 `json:"variant"`
	Media   int32 `json:"media"`
}

func (q *Queries) CreateVariantMedia(ctx context.Context, arg CreateVariantMediaParams) (VariantMedium, error) {
	row := q.db.QueryRowContext(ctx, createVariantMedia, arg.Variant, arg.Media)
	var i VariantMedium
	err := row.Scan(&i.ID, &i.Variant, &i.Media)
	return i, err
}

const detailProduct = `-- name: DetailProduct :one
SELECT p.id, p.name, p.code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh, cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, phan_loai, dang_bao_che, tieu_chuan_sx, cong_ty_sx, cong_ty_dk, active, p.company, p.user_created, p.user_updated, p.updated_at, p.created_at, pc.id, pc.code, pc.name, pc.user_created, pc.created_at, pc.company, pc.user_updated, pc.updated_at, pc.description, pt.id, pt.code, pt.name, pt.user_created, pt.created_at, pt.company, pb.id, pb.code, pb.name, pb.user_created, pb.created_at, pb.company, pb.user_updated, pb.updated_at, pb.description, u.id, u.name, sell_price, import_price, weight, weight_unit, u.user_created, u.user_updated, u.updated_at, u.created_at, ps.id, ps.code, ps.name, ps.company, ps.user_created, ps.user_updated, ps.created_at, ps.updated_at, ps.description, pret.id, pret.code, pret.name, pret.company, pret.user_created, pret.user_updated, pret.created_at, pret.updated_at, pret.description, cl.id, cl.code, cl.name, cp1.id, cp1.name, cp1.code, cp1.country, cp1.address, cp1.company_pharma_type, cp1.created_at, cp2.id, cp2.name, cp2.code, cp2.country, cp2.address, cp2.company_pharma_type, cp2.created_at FROM products p
LEFT JOIN product_categories pc ON pc.id = p.product_category
LEFT JOIN product_type pt ON pt.id = p.type
LEFT JOIN product_brand pb ON pb.id = p.brand
LEFT JOIN units u ON u.id = p.unit
LEFT JOIN production_standard ps ON ps.code = p.tieu_chuan_sx
LEFT JOIN preparation_type pret ON pret.code = p.dang_bao_che
LEFT JOIN classify cl ON cl.code = p.phan_loai
LEFT JOIN company_pharma cp1 ON cp1.id = p.cong_ty_dk
LEFT JOIN company_pharma cp2 ON cp1.id = p.cong_ty_sx
WHERE p.id = $1
`

type DetailProductRow struct {
	ID                  int32           `json:"id"`
	Name                string          `json:"name"`
	Code                string          `json:"code"`
	ProductCategory     sql.NullInt32   `json:"product_category"`
	Type                sql.NullInt32   `json:"type"`
	Brand               sql.NullInt32   `json:"brand"`
	Unit                int32           `json:"unit"`
	TaDuoc              sql.NullString  `json:"ta_duoc"`
	NongDo              sql.NullString  `json:"nong_do"`
	LieuDung            sql.NullString  `json:"lieu_dung"`
	ChiDinh             sql.NullString  `json:"chi_dinh"`
	ChongChiDinh        sql.NullString  `json:"chong_chi_dinh"`
	CongDung            sql.NullString  `json:"cong_dung"`
	TacDungPhu          sql.NullString  `json:"tac_dung_phu"`
	ThanTrong           sql.NullString  `json:"than_trong"`
	TuongTac            sql.NullString  `json:"tuong_tac"`
	BaoQuan             sql.NullString  `json:"bao_quan"`
	DongGoi             sql.NullString  `json:"dong_goi"`
	PhanLoai            sql.NullString  `json:"phan_loai"`
	DangBaoChe          sql.NullString  `json:"dang_bao_che"`
	TieuChuanSx         sql.NullString  `json:"tieu_chuan_sx"`
	CongTySx            sql.NullInt32   `json:"cong_ty_sx"`
	CongTyDk            sql.NullInt32   `json:"cong_ty_dk"`
	Active              bool            `json:"active"`
	Company             int32           `json:"company"`
	UserCreated         int32           `json:"user_created"`
	UserUpdated         sql.NullInt32   `json:"user_updated"`
	UpdatedAt           sql.NullTime    `json:"updated_at"`
	CreatedAt           time.Time       `json:"created_at"`
	ID_2                sql.NullInt32   `json:"id_2"`
	Code_2              sql.NullString  `json:"code_2"`
	Name_2              sql.NullString  `json:"name_2"`
	UserCreated_2       sql.NullInt32   `json:"user_created_2"`
	CreatedAt_2         sql.NullTime    `json:"created_at_2"`
	Company_2           sql.NullInt32   `json:"company_2"`
	UserUpdated_2       sql.NullInt32   `json:"user_updated_2"`
	UpdatedAt_2         sql.NullTime    `json:"updated_at_2"`
	Description         sql.NullString  `json:"description"`
	ID_3                sql.NullInt32   `json:"id_3"`
	Code_3              sql.NullString  `json:"code_3"`
	Name_3              sql.NullString  `json:"name_3"`
	UserCreated_3       sql.NullInt32   `json:"user_created_3"`
	CreatedAt_3         sql.NullTime    `json:"created_at_3"`
	Company_3           sql.NullInt32   `json:"company_3"`
	ID_4                sql.NullInt32   `json:"id_4"`
	Code_4              sql.NullString  `json:"code_4"`
	Name_4              sql.NullString  `json:"name_4"`
	UserCreated_4       sql.NullInt32   `json:"user_created_4"`
	CreatedAt_4         sql.NullTime    `json:"created_at_4"`
	Company_4           sql.NullInt32   `json:"company_4"`
	UserUpdated_3       sql.NullInt32   `json:"user_updated_3"`
	UpdatedAt_3         sql.NullTime    `json:"updated_at_3"`
	Description_2       sql.NullString  `json:"description_2"`
	ID_5                sql.NullInt32   `json:"id_5"`
	Name_5              sql.NullString  `json:"name_5"`
	SellPrice           sql.NullFloat64 `json:"sell_price"`
	ImportPrice         sql.NullFloat64 `json:"import_price"`
	Weight              sql.NullFloat64 `json:"weight"`
	WeightUnit          sql.NullString  `json:"weight_unit"`
	UserCreated_5       sql.NullInt32   `json:"user_created_5"`
	UserUpdated_4       sql.NullInt32   `json:"user_updated_4"`
	UpdatedAt_4         sql.NullTime    `json:"updated_at_4"`
	CreatedAt_5         sql.NullTime    `json:"created_at_5"`
	ID_6                sql.NullInt32   `json:"id_6"`
	Code_5              sql.NullString  `json:"code_5"`
	Name_6              sql.NullString  `json:"name_6"`
	Company_5           sql.NullInt32   `json:"company_5"`
	UserCreated_6       sql.NullInt32   `json:"user_created_6"`
	UserUpdated_5       sql.NullInt32   `json:"user_updated_5"`
	CreatedAt_6         sql.NullTime    `json:"created_at_6"`
	UpdatedAt_5         sql.NullTime    `json:"updated_at_5"`
	Description_3       sql.NullString  `json:"description_3"`
	ID_7                sql.NullInt32   `json:"id_7"`
	Code_6              sql.NullString  `json:"code_6"`
	Name_7              sql.NullString  `json:"name_7"`
	Company_6           sql.NullInt32   `json:"company_6"`
	UserCreated_7       sql.NullInt32   `json:"user_created_7"`
	UserUpdated_6       sql.NullInt32   `json:"user_updated_6"`
	CreatedAt_7         sql.NullTime    `json:"created_at_7"`
	UpdatedAt_6         sql.NullTime    `json:"updated_at_6"`
	Description_4       sql.NullString  `json:"description_4"`
	ID_8                sql.NullInt32   `json:"id_8"`
	Code_7              sql.NullString  `json:"code_7"`
	Name_8              sql.NullString  `json:"name_8"`
	ID_9                sql.NullInt32   `json:"id_9"`
	Name_9              sql.NullString  `json:"name_9"`
	Code_8              sql.NullString  `json:"code_8"`
	Country             sql.NullString  `json:"country"`
	Address             sql.NullString  `json:"address"`
	CompanyPharmaType   sql.NullString  `json:"company_pharma_type"`
	CreatedAt_8         sql.NullTime    `json:"created_at_8"`
	ID_10               sql.NullInt32   `json:"id_10"`
	Name_10             sql.NullString  `json:"name_10"`
	Code_9              sql.NullString  `json:"code_9"`
	Country_2           sql.NullString  `json:"country_2"`
	Address_2           sql.NullString  `json:"address_2"`
	CompanyPharmaType_2 sql.NullString  `json:"company_pharma_type_2"`
	CreatedAt_9         sql.NullTime    `json:"created_at_9"`
}

func (q *Queries) DetailProduct(ctx context.Context, id int32) (DetailProductRow, error) {
	row := q.db.QueryRowContext(ctx, detailProduct, id)
	var i DetailProductRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.ProductCategory,
		&i.Type,
		&i.Brand,
		&i.Unit,
		&i.TaDuoc,
		&i.NongDo,
		&i.LieuDung,
		&i.ChiDinh,
		&i.ChongChiDinh,
		&i.CongDung,
		&i.TacDungPhu,
		&i.ThanTrong,
		&i.TuongTac,
		&i.BaoQuan,
		&i.DongGoi,
		&i.PhanLoai,
		&i.DangBaoChe,
		&i.TieuChuanSx,
		&i.CongTySx,
		&i.CongTyDk,
		&i.Active,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ID_2,
		&i.Code_2,
		&i.Name_2,
		&i.UserCreated_2,
		&i.CreatedAt_2,
		&i.Company_2,
		&i.UserUpdated_2,
		&i.UpdatedAt_2,
		&i.Description,
		&i.ID_3,
		&i.Code_3,
		&i.Name_3,
		&i.UserCreated_3,
		&i.CreatedAt_3,
		&i.Company_3,
		&i.ID_4,
		&i.Code_4,
		&i.Name_4,
		&i.UserCreated_4,
		&i.CreatedAt_4,
		&i.Company_4,
		&i.UserUpdated_3,
		&i.UpdatedAt_3,
		&i.Description_2,
		&i.ID_5,
		&i.Name_5,
		&i.SellPrice,
		&i.ImportPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.UserCreated_5,
		&i.UserUpdated_4,
		&i.UpdatedAt_4,
		&i.CreatedAt_5,
		&i.ID_6,
		&i.Code_5,
		&i.Name_6,
		&i.Company_5,
		&i.UserCreated_6,
		&i.UserUpdated_5,
		&i.CreatedAt_6,
		&i.UpdatedAt_5,
		&i.Description_3,
		&i.ID_7,
		&i.Code_6,
		&i.Name_7,
		&i.Company_6,
		&i.UserCreated_7,
		&i.UserUpdated_6,
		&i.CreatedAt_7,
		&i.UpdatedAt_6,
		&i.Description_4,
		&i.ID_8,
		&i.Code_7,
		&i.Name_8,
		&i.ID_9,
		&i.Name_9,
		&i.Code_8,
		&i.Country,
		&i.Address,
		&i.CompanyPharmaType,
		&i.CreatedAt_8,
		&i.ID_10,
		&i.Name_10,
		&i.Code_9,
		&i.Country_2,
		&i.Address_2,
		&i.CompanyPharmaType_2,
		&i.CreatedAt_9,
	)
	return i, err
}

const getProductMedia = `-- name: GetProductMedia :many
SELECT pm.product, pm.media, m.media_url FROM product_media pm
JOIN medias m ON pm.media = m.id
WHERE product = $1
`

type GetProductMediaRow struct {
	Product  int32  `json:"product"`
	Media    int32  `json:"media"`
	MediaUrl string `json:"media_url"`
}

func (q *Queries) GetProductMedia(ctx context.Context, product int32) ([]GetProductMediaRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductMedia, product)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductMediaRow{}
	for rows.Next() {
		var i GetProductMediaRow
		if err := rows.Scan(&i.Product, &i.Media, &i.MediaUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh, cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, phan_loai, dang_bao_che, tieu_chuan_sx, cong_ty_sx, cong_ty_dk, active, company, user_created, user_updated, updated_at, created_at FROM products
WHERE company = $1::int AND (
    name ILIKE '%' || COALESCE($2::varchar, '') || '%' OR
    code ILIKE '%' || COALESCE($2::varchar, '') || '%' OR
    ($3::int IS NULL OR brand = $3::int) OR
    ($4::int IS NULL OR product_category = $4::int)
) AND (
    $5::bool IS NULL OR $5::bool = active
)
ORDER BY -id
LIMIT COALESCE($7::int, 10)
OFFSET (COALESCE($6::int, 1) - 1) * COALESCE($7::int, 10)
`

type GetProductsParams struct {
	Company         sql.NullInt32  `json:"company"`
	Search          sql.NullString `json:"search"`
	Brand           sql.NullInt32  `json:"brand"`
	ProductCategory sql.NullInt32  `json:"product_category"`
	Active          sql.NullBool   `json:"active"`
	Page            sql.NullInt32  `json:"page"`
	Limit           sql.NullInt32  `json:"limit"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts,
		arg.Company,
		arg.Search,
		arg.Brand,
		arg.ProductCategory,
		arg.Active,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.ProductCategory,
			&i.Type,
			&i.Brand,
			&i.Unit,
			&i.TaDuoc,
			&i.NongDo,
			&i.LieuDung,
			&i.ChiDinh,
			&i.ChongChiDinh,
			&i.CongDung,
			&i.TacDungPhu,
			&i.ThanTrong,
			&i.TuongTac,
			&i.BaoQuan,
			&i.DongGoi,
			&i.PhanLoai,
			&i.DangBaoChe,
			&i.TieuChuanSx,
			&i.CongTySx,
			&i.CongTyDk,
			&i.Active,
			&i.Company,
			&i.UserCreated,
			&i.UserUpdated,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCode = `-- name: GetProductsByCode :one
SELECT id, name, code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh, cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, phan_loai, dang_bao_che, tieu_chuan_sx, cong_ty_sx, cong_ty_dk, active, company, user_created, user_updated, updated_at, created_at FROM products
WHERE code = $1
`

func (q *Queries) GetProductsByCode(ctx context.Context, code string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductsByCode, code)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.ProductCategory,
		&i.Type,
		&i.Brand,
		&i.Unit,
		&i.TaDuoc,
		&i.NongDo,
		&i.LieuDung,
		&i.ChiDinh,
		&i.ChongChiDinh,
		&i.CongDung,
		&i.TacDungPhu,
		&i.ThanTrong,
		&i.TuongTac,
		&i.BaoQuan,
		&i.DongGoi,
		&i.PhanLoai,
		&i.DangBaoChe,
		&i.TieuChuanSx,
		&i.CongTySx,
		&i.CongTyDk,
		&i.Active,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getVariantByProduct = `-- name: GetVariantByProduct :one
SELECT id, name, code, barcode, decision_number, register_number, longevity, vat, product, user_created, user_updated, updated_at, created_at, initial_inventory, real_inventory FROM variants
WHERE product = $1
`

func (q *Queries) GetVariantByProduct(ctx context.Context, product int32) (Variant, error) {
	row := q.db.QueryRowContext(ctx, getVariantByProduct, product)
	var i Variant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Barcode,
		&i.DecisionNumber,
		&i.RegisterNumber,
		&i.Longevity,
		&i.Vat,
		&i.Product,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.InitialInventory,
		&i.RealInventory,
	)
	return i, err
}

const listIngredient = `-- name: ListIngredient :many
SELECT id, name, weight, unit, product FROM ingredient
WHERE product = $1
`

func (q *Queries) ListIngredient(ctx context.Context, product int32) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredient, product)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingredient{}
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.Unit,
			&i.Product,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    brand = COALESCE($1, product_category),
    product_category = COALESCE($2, product_category),
    active = COALESCE($3::bool, active)
WHERE id = $4
RETURNING id, name, code, product_category, type, brand, unit, ta_duoc, nong_do, lieu_dung, chi_dinh, chong_chi_dinh, cong_dung, tac_dung_phu, than_trong, tuong_tac, bao_quan, dong_goi, phan_loai, dang_bao_che, tieu_chuan_sx, cong_ty_sx, cong_ty_dk, active, company, user_created, user_updated, updated_at, created_at
`

type UpdateProductParams struct {
	Brand           sql.NullInt32 `json:"brand"`
	ProductCategory sql.NullInt32 `json:"product_category"`
	Active          sql.NullBool  `json:"active"`
	ID              int32         `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Brand,
		arg.ProductCategory,
		arg.Active,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.ProductCategory,
		&i.Type,
		&i.Brand,
		&i.Unit,
		&i.TaDuoc,
		&i.NongDo,
		&i.LieuDung,
		&i.ChiDinh,
		&i.ChongChiDinh,
		&i.CongDung,
		&i.TacDungPhu,
		&i.ThanTrong,
		&i.TuongTac,
		&i.BaoQuan,
		&i.DongGoi,
		&i.PhanLoai,
		&i.DangBaoChe,
		&i.TieuChuanSx,
		&i.CongTySx,
		&i.CongTyDk,
		&i.Active,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateVariant = `-- name: UpdateVariant :one
UPDATE variants 
SET
    real_inventory = COALESCE($2::int, real_inventory)
WHERE id = $1
RETURNING id, name, code, barcode, decision_number, register_number, longevity, vat, product, user_created, user_updated, updated_at, created_at, initial_inventory, real_inventory
`

type UpdateVariantParams struct {
	ID            int32         `json:"id"`
	RealInventory sql.NullInt32 `json:"real_inventory"`
}

func (q *Queries) UpdateVariant(ctx context.Context, arg UpdateVariantParams) (Variant, error) {
	row := q.db.QueryRowContext(ctx, updateVariant, arg.ID, arg.RealInventory)
	var i Variant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Barcode,
		&i.DecisionNumber,
		&i.RegisterNumber,
		&i.Longevity,
		&i.Vat,
		&i.Product,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.InitialInventory,
		&i.RealInventory,
	)
	return i, err
}
