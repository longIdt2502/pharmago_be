// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: promotions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPromotion = `-- name: CreatePromotion :one
INSERT INTO promotions (
  id, code, type, title, conditions_text, conditions_point_customer, min_value, 
  is_discount_percent, value_discount, max_discount, time_apply, date_start, date_end, 
  apply_multiple_times, apply_simultaneously, status, company, user_created, 
  user_updated
) VALUES (
  $1::uuid, $2::varchar, $3::varchar, $4::varchar, 
  $5::varchar, $6::int, $7::float, 
  $8::bool, $9::float, $10::float, $11::int, 
  $12::timestamp, $13::timestamp, $14::bool, 
  $15::bool, $16::bool, $17::int, 
  $18::int, $19::int
) RETURNING id, code, type, title, conditions_text, conditions_point_customer, min_value, is_discount_percent, value_discount, max_discount, time_apply, date_start, date_end, apply_multiple_times, apply_simultaneously, status, company, user_created, user_updated, created_at, updated_at
`

type CreatePromotionParams struct {
	ID                      uuid.UUID      `json:"id"`
	Code                    string         `json:"code"`
	Type                    sql.NullString `json:"type"`
	Title                   string         `json:"title"`
	ConditionsText          sql.NullString `json:"conditions_text"`
	ConditionsPointCustomer sql.NullInt32  `json:"conditions_point_customer"`
	MinValue                float64        `json:"min_value"`
	IsDiscountPercent       bool           `json:"is_discount_percent"`
	ValueDiscount           float64        `json:"value_discount"`
	MaxDiscount             float64        `json:"max_discount"`
	TimeApply               sql.NullInt32  `json:"time_apply"`
	DateStart               sql.NullTime   `json:"date_start"`
	DateEnd                 sql.NullTime   `json:"date_end"`
	ApplyMultipleTimes      bool           `json:"apply_multiple_times"`
	ApplySimultaneously     bool           `json:"apply_simultaneously"`
	Status                  bool           `json:"status"`
	Company                 int32          `json:"company"`
	UserCreated             int32          `json:"user_created"`
	UserUpdated             sql.NullInt32  `json:"user_updated"`
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, createPromotion,
		arg.ID,
		arg.Code,
		arg.Type,
		arg.Title,
		arg.ConditionsText,
		arg.ConditionsPointCustomer,
		arg.MinValue,
		arg.IsDiscountPercent,
		arg.ValueDiscount,
		arg.MaxDiscount,
		arg.TimeApply,
		arg.DateStart,
		arg.DateEnd,
		arg.ApplyMultipleTimes,
		arg.ApplySimultaneously,
		arg.Status,
		arg.Company,
		arg.UserCreated,
		arg.UserUpdated,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Type,
		&i.Title,
		&i.ConditionsText,
		&i.ConditionsPointCustomer,
		&i.MinValue,
		&i.IsDiscountPercent,
		&i.ValueDiscount,
		&i.MaxDiscount,
		&i.TimeApply,
		&i.DateStart,
		&i.DateEnd,
		&i.ApplyMultipleTimes,
		&i.ApplySimultaneously,
		&i.Status,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPromotionItem = `-- name: CreatePromotionItem :one
INSERT INTO promotion_item (
  id, min_buy, amount_gift, promotions, variant, service, applicable_variant, applicable_service
) VALUES (
  $1::uuid, $2::int, $3::int, $4::uuid, 
  $5::int, $6::int, $7::int, $8::int
) RETURNING id, min_buy, amount_gift, promotions, applicable_variant, applicable_service, variant, service
`

type CreatePromotionItemParams struct {
	ID                uuid.UUID     `json:"id"`
	MinBuy            int32         `json:"min_buy"`
	AmountGift        int32         `json:"amount_gift"`
	Promotions        uuid.UUID     `json:"promotions"`
	Variant           sql.NullInt32 `json:"variant"`
	Service           sql.NullInt32 `json:"service"`
	ApplicableVariant sql.NullInt32 `json:"applicable_variant"`
	ApplicableService sql.NullInt32 `json:"applicable_service"`
}

func (q *Queries) CreatePromotionItem(ctx context.Context, arg CreatePromotionItemParams) (PromotionItem, error) {
	row := q.db.QueryRowContext(ctx, createPromotionItem,
		arg.ID,
		arg.MinBuy,
		arg.AmountGift,
		arg.Promotions,
		arg.Variant,
		arg.Service,
		arg.ApplicableVariant,
		arg.ApplicableService,
	)
	var i PromotionItem
	err := row.Scan(
		&i.ID,
		&i.MinBuy,
		&i.AmountGift,
		&i.Promotions,
		&i.ApplicableVariant,
		&i.ApplicableService,
		&i.Variant,
		&i.Service,
	)
	return i, err
}

const getByVariantOrService = `-- name: GetByVariantOrService :many
SELECT pi.id, min_buy, amount_gift, promotions, applicable_variant, applicable_service, variant, service, p.id, p.code, type, p.title, conditions_text, conditions_point_customer, min_value, is_discount_percent, value_discount, max_discount, time_apply, date_start, date_end, apply_multiple_times, apply_simultaneously, status, p.company, p.user_created, p.user_updated, p.created_at, p.updated_at, v.id, name, v.code, barcode, decision_number, register_number, longevity, vat, product, v.user_created, v.user_updated, v.updated_at, v.created_at, initial_inventory, real_inventory, s.id, image, s.code, s.title, entity, staff, frequency, reminder_time, unit, price, description, s.company, s.user_created, s.user_updated, s.created_at, s.updated_at, pt.code, pt.title, v.name AS v_name, v.code AS v_code, s.title AS s_name, s.code AS s_code FROM promotion_item pi
LEFT JOIN promotions p ON p.id = pi.promotions
LEFT JOIN variants v ON pi.variant = v.id
LEFT JOIN services s ON pi.service = s.id
LEFT JOIN promotion_type pt ON p.type = pt.code 
WHERE (pi.applicable_variant = $1::int OR pi.applicable_service = $2::int)
AND p.type = 'GIFT'
`

type GetByVariantOrServiceParams struct {
	Variant sql.NullInt32 `json:"variant"`
	Service sql.NullInt32 `json:"service"`
}

type GetByVariantOrServiceRow struct {
	ID                      uuid.UUID       `json:"id"`
	MinBuy                  sql.NullInt32   `json:"min_buy"`
	AmountGift              sql.NullInt32   `json:"amount_gift"`
	Promotions              uuid.UUID       `json:"promotions"`
	ApplicableVariant       sql.NullInt32   `json:"applicable_variant"`
	ApplicableService       sql.NullInt32   `json:"applicable_service"`
	Variant                 sql.NullInt32   `json:"variant"`
	Service                 sql.NullInt32   `json:"service"`
	ID_2                    uuid.NullUUID   `json:"id_2"`
	Code                    sql.NullString  `json:"code"`
	Type                    sql.NullString  `json:"type"`
	Title                   sql.NullString  `json:"title"`
	ConditionsText          sql.NullString  `json:"conditions_text"`
	ConditionsPointCustomer sql.NullInt32   `json:"conditions_point_customer"`
	MinValue                sql.NullFloat64 `json:"min_value"`
	IsDiscountPercent       sql.NullBool    `json:"is_discount_percent"`
	ValueDiscount           sql.NullFloat64 `json:"value_discount"`
	MaxDiscount             sql.NullFloat64 `json:"max_discount"`
	TimeApply               sql.NullInt32   `json:"time_apply"`
	DateStart               sql.NullTime    `json:"date_start"`
	DateEnd                 sql.NullTime    `json:"date_end"`
	ApplyMultipleTimes      sql.NullBool    `json:"apply_multiple_times"`
	ApplySimultaneously     sql.NullBool    `json:"apply_simultaneously"`
	Status                  sql.NullBool    `json:"status"`
	Company                 sql.NullInt32   `json:"company"`
	UserCreated             sql.NullInt32   `json:"user_created"`
	UserUpdated             sql.NullInt32   `json:"user_updated"`
	CreatedAt               sql.NullTime    `json:"created_at"`
	UpdatedAt               sql.NullTime    `json:"updated_at"`
	ID_3                    sql.NullInt32   `json:"id_3"`
	Name                    sql.NullString  `json:"name"`
	Code_2                  sql.NullString  `json:"code_2"`
	Barcode                 sql.NullString  `json:"barcode"`
	DecisionNumber          sql.NullString  `json:"decision_number"`
	RegisterNumber          sql.NullString  `json:"register_number"`
	Longevity               sql.NullString  `json:"longevity"`
	Vat                     sql.NullFloat64 `json:"vat"`
	Product                 sql.NullInt32   `json:"product"`
	UserCreated_2           sql.NullInt32   `json:"user_created_2"`
	UserUpdated_2           sql.NullInt32   `json:"user_updated_2"`
	UpdatedAt_2             sql.NullTime    `json:"updated_at_2"`
	CreatedAt_2             sql.NullTime    `json:"created_at_2"`
	InitialInventory        sql.NullInt32   `json:"initial_inventory"`
	RealInventory           sql.NullInt32   `json:"real_inventory"`
	ID_4                    sql.NullInt32   `json:"id_4"`
	Image                   sql.NullInt32   `json:"image"`
	Code_3                  sql.NullString  `json:"code_3"`
	Title_2                 sql.NullString  `json:"title_2"`
	Entity                  sql.NullString  `json:"entity"`
	Staff                   sql.NullInt32   `json:"staff"`
	Frequency               sql.NullString  `json:"frequency"`
	ReminderTime            sql.NullInt32   `json:"reminder_time"`
	Unit                    sql.NullString  `json:"unit"`
	Price                   sql.NullFloat64 `json:"price"`
	Description             sql.NullString  `json:"description"`
	Company_2               sql.NullInt32   `json:"company_2"`
	UserCreated_3           sql.NullInt32   `json:"user_created_3"`
	UserUpdated_3           sql.NullInt32   `json:"user_updated_3"`
	CreatedAt_3             sql.NullTime    `json:"created_at_3"`
	UpdatedAt_3             sql.NullTime    `json:"updated_at_3"`
	Code_4                  sql.NullString  `json:"code_4"`
	Title_3                 sql.NullString  `json:"title_3"`
	VName                   sql.NullString  `json:"v_name"`
	VCode                   sql.NullString  `json:"v_code"`
	SName                   sql.NullString  `json:"s_name"`
	SCode                   sql.NullString  `json:"s_code"`
}

func (q *Queries) GetByVariantOrService(ctx context.Context, arg GetByVariantOrServiceParams) ([]GetByVariantOrServiceRow, error) {
	rows, err := q.db.QueryContext(ctx, getByVariantOrService, arg.Variant, arg.Service)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetByVariantOrServiceRow{}
	for rows.Next() {
		var i GetByVariantOrServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.MinBuy,
			&i.AmountGift,
			&i.Promotions,
			&i.ApplicableVariant,
			&i.ApplicableService,
			&i.Variant,
			&i.Service,
			&i.ID_2,
			&i.Code,
			&i.Type,
			&i.Title,
			&i.ConditionsText,
			&i.ConditionsPointCustomer,
			&i.MinValue,
			&i.IsDiscountPercent,
			&i.ValueDiscount,
			&i.MaxDiscount,
			&i.TimeApply,
			&i.DateStart,
			&i.DateEnd,
			&i.ApplyMultipleTimes,
			&i.ApplySimultaneously,
			&i.Status,
			&i.Company,
			&i.UserCreated,
			&i.UserUpdated,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_3,
			&i.Name,
			&i.Code_2,
			&i.Barcode,
			&i.DecisionNumber,
			&i.RegisterNumber,
			&i.Longevity,
			&i.Vat,
			&i.Product,
			&i.UserCreated_2,
			&i.UserUpdated_2,
			&i.UpdatedAt_2,
			&i.CreatedAt_2,
			&i.InitialInventory,
			&i.RealInventory,
			&i.ID_4,
			&i.Image,
			&i.Code_3,
			&i.Title_2,
			&i.Entity,
			&i.Staff,
			&i.Frequency,
			&i.ReminderTime,
			&i.Unit,
			&i.Price,
			&i.Description,
			&i.Company_2,
			&i.UserCreated_3,
			&i.UserUpdated_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Code_4,
			&i.Title_3,
			&i.VName,
			&i.VCode,
			&i.SName,
			&i.SCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionByPriceOrder = `-- name: GetPromotionByPriceOrder :many
SELECT id, code, type, title, conditions_text, conditions_point_customer, min_value, is_discount_percent, value_discount, max_discount, time_apply, date_start, date_end, apply_multiple_times, apply_simultaneously, status, company, user_created, user_updated, created_at, updated_at FROM promotions
WHERE min_value >= $1::float
AND company = $2::int
AND "type" = 'DISCOUNT'
`

type GetPromotionByPriceOrderParams struct {
	Price   float64 `json:"price"`
	Company int32   `json:"company"`
}

func (q *Queries) GetPromotionByPriceOrder(ctx context.Context, arg GetPromotionByPriceOrderParams) ([]Promotion, error) {
	rows, err := q.db.QueryContext(ctx, getPromotionByPriceOrder, arg.Price, arg.Company)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promotion{}
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Type,
			&i.Title,
			&i.ConditionsText,
			&i.ConditionsPointCustomer,
			&i.MinValue,
			&i.IsDiscountPercent,
			&i.ValueDiscount,
			&i.MaxDiscount,
			&i.TimeApply,
			&i.DateStart,
			&i.DateEnd,
			&i.ApplyMultipleTimes,
			&i.ApplySimultaneously,
			&i.Status,
			&i.Company,
			&i.UserCreated,
			&i.UserUpdated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
