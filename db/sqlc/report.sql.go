// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: report.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getRevenueCompany = `-- name: GetRevenueCompany :one
SELECT COALESCE(SUM(total_price), 0)::float AS total_sum
FROM orders
WHERE status = 'COMPLETE'
AND type = 'SELL'
AND company = $1
`

func (q *Queries) GetRevenueCompany(ctx context.Context, company int32) (float64, error) {
	row := q.db.QueryRowContext(ctx, getRevenueCompany, company)
	var total_sum float64
	err := row.Scan(&total_sum)
	return total_sum, err
}

const getVariantBestSale = `-- name: GetVariantBestSale :many
WITH variant_total AS (
    SELECT v.id AS variant_id,
           COALESCE(SUM(oi.total_price), 0)::float AS total_revenue
    FROM variants v
    LEFT JOIN order_items oi ON v.id = oi.variant
    LEFT JOIN orders o ON o.id = oi.order
    WHERE o.status = 'COMPLETE'
    GROUP BY v.id
)
SELECT v.id, v.name, v.code, v.barcode, v.decision_number, v.register_number, v.longevity, v.vat, v.product, v.user_created, v.user_updated, v.updated_at, v.created_at, vt.total_revenue AS revenue, m.media_url AS imageUrl FROM variant_total vt
JOIN variants v ON v.id = vt.variant_id
JOIN products p ON v.product = p.id
JOIN variant_media vm ON vm.variant = v.id
JOIN medias m ON vm.media = m.id
WHERE p.company = $1
ORDER BY vt.total_revenue DESC
LIMIT 3
`

type GetVariantBestSaleRow struct {
	ID             int32         `json:"id"`
	Name           string        `json:"name"`
	Code           string        `json:"code"`
	Barcode        string        `json:"barcode"`
	DecisionNumber string        `json:"decision_number"`
	RegisterNumber string        `json:"register_number"`
	Longevity      string        `json:"longevity"`
	Vat            float64       `json:"vat"`
	Product        int32         `json:"product"`
	UserCreated    int32         `json:"user_created"`
	UserUpdated    sql.NullInt32 `json:"user_updated"`
	UpdatedAt      sql.NullTime  `json:"updated_at"`
	CreatedAt      time.Time     `json:"created_at"`
	Revenue        float64       `json:"revenue"`
	Imageurl       string        `json:"imageurl"`
}

func (q *Queries) GetVariantBestSale(ctx context.Context, company int32) ([]GetVariantBestSaleRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantBestSale, company)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVariantBestSaleRow{}
	for rows.Next() {
		var i GetVariantBestSaleRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Barcode,
			&i.DecisionNumber,
			&i.RegisterNumber,
			&i.Longevity,
			&i.Vat,
			&i.Product,
			&i.UserCreated,
			&i.UserUpdated,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Revenue,
			&i.Imageurl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
