// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    code, title, note, company, user_created, user_updated
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, code, title, note, company, user_created, user_updated, updated_at, created_at
`

type CreateRoleParams struct {
	Code        string         `json:"code"`
	Title       string         `json:"title"`
	Note        sql.NullString `json:"note"`
	Company     sql.NullInt32  `json:"company"`
	UserCreated int32          `json:"user_created"`
	UserUpdated sql.NullInt32  `json:"user_updated"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.Code,
		arg.Title,
		arg.Note,
		arg.Company,
		arg.UserCreated,
		arg.UserUpdated,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Title,
		&i.Note,
		&i.Company,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createRoleItem = `-- name: CreateRoleItem :one
INSERT INTO role_item (
    roles, app, value
) VALUES (
    $1, $2, $3
) RETURNING id, roles, app, value
`

type CreateRoleItemParams struct {
	Roles int32        `json:"roles"`
	App   string       `json:"app"`
	Value sql.NullBool `json:"value"`
}

func (q *Queries) CreateRoleItem(ctx context.Context, arg CreateRoleItemParams) (RoleItem, error) {
	row := q.db.QueryRowContext(ctx, createRoleItem, arg.Roles, arg.App, arg.Value)
	var i RoleItem
	err := row.Scan(
		&i.ID,
		&i.Roles,
		&i.App,
		&i.Value,
	)
	return i, err
}

const listApp = `-- name: ListApp :many
SELECT id, title, code, parent, level FROM apps
WHERE (parent = $1::varchar
OR level = $2::int)
`

type ListAppParams struct {
	Parent sql.NullString `json:"parent"`
	Level  sql.NullInt32  `json:"level"`
}

func (q *Queries) ListApp(ctx context.Context, arg ListAppParams) ([]App, error) {
	rows, err := q.db.QueryContext(ctx, listApp, arg.Parent, arg.Level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.Parent,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRole = `-- name: ListRole :many
SELECT r.id, r.code, title, note, company, user_created, user_updated, updated_at, r.created_at, c.id, name, c.code, tax_code, phone, description, address, c.created_at, owner, ac.id, ac.username, ac.hashed_password, ac.full_name, ac.email, ac.type, ac.is_verify, ac.password_changed_at, ac.created_at, ac.role, au.id, au.username, au.hashed_password, au.full_name, au.email, au.type, au.is_verify, au.password_changed_at, au.created_at, au.role, ac.full_name AS created_name, au.full_name AS updated_name FROM roles r
JOIN companies c ON c.id = r.company
JOIN accounts ac ON ac.id = r.user_created
JOIN accounts au ON ac.id = r.user_updated
WHERE company = $1
AND (
    r.code ILIKE '%' || COALESCE($2::varchar, '') || '%' OR
    r.title ILIKE '%' || COALESCE($2::varchar, '') || '%'
)
AND  ((
        $3::timestamp IS NULL AND $4::timestamp  IS NULL
    ) OR (
        ($3::timestamp IS NULL OR r.created_at >= $3::timestamp) AND
        ($4::timestamp IS NULL OR r.created_at <= $4::timestamp)
))
AND ((
       $5::timestamp IS NULL AND $6::timestamp  IS NULL
   ) OR (
       (r.updated_at >= $5::timestamp OR $5::timestamp  IS NULL) AND
       (r.updated_at <= $6::timestamp OR $6::timestamp  IS NULL)
))
LIMIT COALESCE($8::int, 10)
OFFSET (COALESCE($7::int, 1) - 1) * COALESCE($8::int, 1)
`

type ListRoleParams struct {
	Company      sql.NullInt32  `json:"company"`
	Search       sql.NullString `json:"search"`
	CreatedStart sql.NullTime   `json:"created_start"`
	CreatedEnd   sql.NullTime   `json:"created_end"`
	UpdatedStart sql.NullTime   `json:"updated_start"`
	UpdatedEnd   sql.NullTime   `json:"updated_end"`
	Page         sql.NullInt32  `json:"page"`
	Limit        sql.NullInt32  `json:"limit"`
}

type ListRoleRow struct {
	ID                  int32          `json:"id"`
	Code                string         `json:"code"`
	Title               string         `json:"title"`
	Note                sql.NullString `json:"note"`
	Company             sql.NullInt32  `json:"company"`
	UserCreated         int32          `json:"user_created"`
	UserUpdated         sql.NullInt32  `json:"user_updated"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	CreatedAt           time.Time      `json:"created_at"`
	ID_2                int32          `json:"id_2"`
	Name                string         `json:"name"`
	Code_2              string         `json:"code_2"`
	TaxCode             sql.NullString `json:"tax_code"`
	Phone               sql.NullString `json:"phone"`
	Description         sql.NullString `json:"description"`
	Address             sql.NullInt32  `json:"address"`
	CreatedAt_2         time.Time      `json:"created_at_2"`
	Owner               int32          `json:"owner"`
	ID_3                int32          `json:"id_3"`
	Username            string         `json:"username"`
	HashedPassword      string         `json:"hashed_password"`
	FullName            string         `json:"full_name"`
	Email               string         `json:"email"`
	Type                int32          `json:"type"`
	IsVerify            bool           `json:"is_verify"`
	PasswordChangedAt   time.Time      `json:"password_changed_at"`
	CreatedAt_3         time.Time      `json:"created_at_3"`
	Role                sql.NullInt32  `json:"role"`
	ID_4                int32          `json:"id_4"`
	Username_2          string         `json:"username_2"`
	HashedPassword_2    string         `json:"hashed_password_2"`
	FullName_2          string         `json:"full_name_2"`
	Email_2             string         `json:"email_2"`
	Type_2              int32          `json:"type_2"`
	IsVerify_2          bool           `json:"is_verify_2"`
	PasswordChangedAt_2 time.Time      `json:"password_changed_at_2"`
	CreatedAt_4         time.Time      `json:"created_at_4"`
	Role_2              sql.NullInt32  `json:"role_2"`
	CreatedName         string         `json:"created_name"`
	UpdatedName         string         `json:"updated_name"`
}

func (q *Queries) ListRole(ctx context.Context, arg ListRoleParams) ([]ListRoleRow, error) {
	rows, err := q.db.QueryContext(ctx, listRole,
		arg.Company,
		arg.Search,
		arg.CreatedStart,
		arg.CreatedEnd,
		arg.UpdatedStart,
		arg.UpdatedEnd,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRoleRow{}
	for rows.Next() {
		var i ListRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Title,
			&i.Note,
			&i.Company,
			&i.UserCreated,
			&i.UserUpdated,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ID_2,
			&i.Name,
			&i.Code_2,
			&i.TaxCode,
			&i.Phone,
			&i.Description,
			&i.Address,
			&i.CreatedAt_2,
			&i.Owner,
			&i.ID_3,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.Type,
			&i.IsVerify,
			&i.PasswordChangedAt,
			&i.CreatedAt_3,
			&i.Role,
			&i.ID_4,
			&i.Username_2,
			&i.HashedPassword_2,
			&i.FullName_2,
			&i.Email_2,
			&i.Type_2,
			&i.IsVerify_2,
			&i.PasswordChangedAt_2,
			&i.CreatedAt_4,
			&i.Role_2,
			&i.CreatedName,
			&i.UpdatedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
