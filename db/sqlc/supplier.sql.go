// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: supplier.sql

package db

import (
	"context"
	"database/sql"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suplier (
    code, name, deputy_name, phone, email, address, company
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, code, name, deputy_name, phone, email, address, company
`

type CreateSupplierParams struct {
	Code       string         `json:"code"`
	Name       string         `json:"name"`
	DeputyName string         `json:"deputy_name"`
	Phone      string         `json:"phone"`
	Email      sql.NullString `json:"email"`
	Address    sql.NullInt32  `json:"address"`
	Company    sql.NullInt32  `json:"company"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Suplier, error) {
	row := q.db.QueryRowContext(ctx, createSupplier,
		arg.Code,
		arg.Name,
		arg.DeputyName,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.Company,
	)
	var i Suplier
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DeputyName,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Company,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :one
DELETE FROM suplier
WHERE id = $1 RETURNING id, code, name, deputy_name, phone, email, address, company
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int32) (Suplier, error) {
	row := q.db.QueryRowContext(ctx, deleteSupplier, id)
	var i Suplier
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DeputyName,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Company,
	)
	return i, err
}

const detailSupplier = `-- name: DetailSupplier :one
SELECT id, code, name, deputy_name, phone, email, address, company FROM suplier
WHERE id = $1
`

func (q *Queries) DetailSupplier(ctx context.Context, id int32) (Suplier, error) {
	row := q.db.QueryRowContext(ctx, detailSupplier, id)
	var i Suplier
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DeputyName,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Company,
	)
	return i, err
}

const getListSupplier = `-- name: GetListSupplier :many
SELECT id, code, name, deputy_name, phone, email, address, company FROM suplier
WHERE company = $1::int
AND (
    name ILIKE '%' || COALESCE($2::varchar, '') || '%' OR
    code ILIKE '%' || COALESCE($2::varchar, '') || '%'
)
ORDER BY -id
    LIMIT COALESCE($4::int, 10)
OFFSET (COALESCE($3::int, 1) - 1) * COALESCE($4::int, 10)
`

type GetListSupplierParams struct {
	Company int32          `json:"company"`
	Search  sql.NullString `json:"search"`
	Page    sql.NullInt32  `json:"page"`
	Limit   sql.NullInt32  `json:"limit"`
}

func (q *Queries) GetListSupplier(ctx context.Context, arg GetListSupplierParams) ([]Suplier, error) {
	rows, err := q.db.QueryContext(ctx, getListSupplier,
		arg.Company,
		arg.Search,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Suplier{}
	for rows.Next() {
		var i Suplier
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.DeputyName,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE suplier
SET
    name = COALESCE($1, name),
    deputy_name = COALESCE($2, deputy_name),
    phone = COALESCE($3, phone),
    email = COALESCE($4, email)
WHERE id = $5
RETURNING id, code, name, deputy_name, phone, email, address, company
`

type UpdateSupplierParams struct {
	Name       sql.NullString `json:"name"`
	DeputyName sql.NullString `json:"deputy_name"`
	Phone      sql.NullString `json:"phone"`
	Email      sql.NullString `json:"email"`
	ID         int32          `json:"id"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Suplier, error) {
	row := q.db.QueryRowContext(ctx, updateSupplier,
		arg.Name,
		arg.DeputyName,
		arg.Phone,
		arg.Email,
		arg.ID,
	)
	var i Suplier
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DeputyName,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Company,
	)
	return i, err
}
