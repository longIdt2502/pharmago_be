// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: unit.sql

package db

import (
	"context"
)

const detailUnit = `-- name: DetailUnit :one
SELECT id, name, sell_price, import_price, weight, weight_unit, user_created, user_updated, updated_at, created_at FROM units
WHERE id = $1
`

func (q *Queries) DetailUnit(ctx context.Context, id int32) (Unit, error) {
	row := q.db.QueryRowContext(ctx, detailUnit, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SellPrice,
		&i.ImportPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.UserCreated,
		&i.UserUpdated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getListUnitChange = `-- name: GetListUnitChange :many
SELECT id, name, value, sell_price, unit, user_created, user_updated, updated_at, created_at FROM unit_changes
WHERE unit = $1
`

func (q *Queries) GetListUnitChange(ctx context.Context, unit int32) ([]UnitChange, error) {
	rows, err := q.db.QueryContext(ctx, getListUnitChange, unit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UnitChange{}
	for rows.Next() {
		var i UnitChange
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.SellPrice,
			&i.Unit,
			&i.UserCreated,
			&i.UserUpdated,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
