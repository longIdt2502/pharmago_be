// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: verify.sql

package db

import (
	"context"
)

const createVerify = `-- name: CreateVerify :one
INSERT INTO verifies (
    username, email, secret_code
) VALUES ($1, $2, $3) RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerify(ctx context.Context, arg CreateVerifyParams) (Verify, error) {
	row := q.db.QueryRowContext(ctx, createVerify, arg.Username, arg.Email, arg.SecretCode)
	var i Verify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerify = `-- name: GetVerify :one
SELECT id, username, email, secret_code, is_used, created_at, expired_at FROM verifies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVerify(ctx context.Context, id int32) (Verify, error) {
	row := q.db.QueryRowContext(ctx, getVerify, id)
	var i Verify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerify = `-- name: UpdateVerify :one
UPDATE verifies
SET
    is_used = TRUE
WHERE
    id = $1
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

func (q *Queries) UpdateVerify(ctx context.Context, id int32) (Verify, error) {
	row := q.db.QueryRowContext(ctx, updateVerify, id)
	var i Verify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
