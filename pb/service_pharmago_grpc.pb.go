// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: service_pharmago.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pharmago_Login_FullMethodName                     = "/pb.Pharmago/Login"
	Pharmago_CheckToken_FullMethodName                = "/pb.Pharmago/CheckToken"
	Pharmago_CreateAccount_FullMethodName             = "/pb.Pharmago/CreateAccount"
	Pharmago_VerifyAccount_FullMethodName             = "/pb.Pharmago/VerifyAccount"
	Pharmago_SendCode_FullMethodName                  = "/pb.Pharmago/SendCode"
	Pharmago_VerifyCode_FullMethodName                = "/pb.Pharmago/VerifyCode"
	Pharmago_ResetPassword_FullMethodName             = "/pb.Pharmago/ResetPassword"
	Pharmago_CheckEmail_FullMethodName                = "/pb.Pharmago/CheckEmail"
	Pharmago_CheckPhone_FullMethodName                = "/pb.Pharmago/CheckPhone"
	Pharmago_AccountDetail_FullMethodName             = "/pb.Pharmago/AccountDetail"
	Pharmago_AccountInactive_FullMethodName           = "/pb.Pharmago/AccountInactive"
	Pharmago_AccountList_FullMethodName               = "/pb.Pharmago/AccountList"
	Pharmago_CreateEmployee_FullMethodName            = "/pb.Pharmago/CreateEmployee"
	Pharmago_UpdateEmployee_FullMethodName            = "/pb.Pharmago/UpdateEmployee"
	Pharmago_DetailEmployee_FullMethodName            = "/pb.Pharmago/DetailEmployee"
	Pharmago_AssignRoleEmployee_FullMethodName        = "/pb.Pharmago/AssignRoleEmployee"
	Pharmago_DeleteEmployee_FullMethodName            = "/pb.Pharmago/DeleteEmployee"
	Pharmago_AppList_FullMethodName                   = "/pb.Pharmago/AppList"
	Pharmago_RoleCreate_FullMethodName                = "/pb.Pharmago/RoleCreate"
	Pharmago_RoleList_FullMethodName                  = "/pb.Pharmago/RoleList"
	Pharmago_RoleDetail_FullMethodName                = "/pb.Pharmago/RoleDetail"
	Pharmago_RoleUpdate_FullMethodName                = "/pb.Pharmago/RoleUpdate"
	Pharmago_RoleDelete_FullMethodName                = "/pb.Pharmago/RoleDelete"
	Pharmago_HomeData_FullMethodName                  = "/pb.Pharmago/HomeData"
	Pharmago_ReportRevenue_FullMethodName             = "/pb.Pharmago/ReportRevenue"
	Pharmago_ReportOrder_FullMethodName               = "/pb.Pharmago/ReportOrder"
	Pharmago_ReportCustomer_FullMethodName            = "/pb.Pharmago/ReportCustomer"
	Pharmago_ReportCustomerRevenue_FullMethodName     = "/pb.Pharmago/ReportCustomerRevenue"
	Pharmago_CreateCompany_FullMethodName             = "/pb.Pharmago/CreateCompany"
	Pharmago_UpdateCompany_FullMethodName             = "/pb.Pharmago/UpdateCompany"
	Pharmago_DetailCompany_FullMethodName             = "/pb.Pharmago/DetailCompany"
	Pharmago_ListCompanies_FullMethodName             = "/pb.Pharmago/ListCompanies"
	Pharmago_AssignEmployee_FullMethodName            = "/pb.Pharmago/AssignEmployee"
	Pharmago_ListProvinces_FullMethodName             = "/pb.Pharmago/ListProvinces"
	Pharmago_ListDistricts_FullMethodName             = "/pb.Pharmago/ListDistricts"
	Pharmago_ListWards_FullMethodName                 = "/pb.Pharmago/ListWards"
	Pharmago_CreateProduct_FullMethodName             = "/pb.Pharmago/CreateProduct"
	Pharmago_UpdateProduct_FullMethodName             = "/pb.Pharmago/UpdateProduct"
	Pharmago_ListProduct_FullMethodName               = "/pb.Pharmago/ListProduct"
	Pharmago_DetailProduct_FullMethodName             = "/pb.Pharmago/DetailProduct"
	Pharmago_PromotionByProduct_FullMethodName        = "/pb.Pharmago/PromotionByProduct"
	Pharmago_PromotionCheck_FullMethodName            = "/pb.Pharmago/PromotionCheck"
	Pharmago_PromotionCreate_FullMethodName           = "/pb.Pharmago/PromotionCreate"
	Pharmago_ListVariant_FullMethodName               = "/pb.Pharmago/ListVariant"
	Pharmago_VariantsCustomerBuy_FullMethodName       = "/pb.Pharmago/VariantsCustomerBuy"
	Pharmago_ScanVariant_FullMethodName               = "/pb.Pharmago/ScanVariant"
	Pharmago_GetPriceList_FullMethodName              = "/pb.Pharmago/GetPriceList"
	Pharmago_DetailPriceList_FullMethodName           = "/pb.Pharmago/DetailPriceList"
	Pharmago_UpdatePriceList_FullMethodName           = "/pb.Pharmago/UpdatePriceList"
	Pharmago_ClassifyList_FullMethodName              = "/pb.Pharmago/ClassifyList"
	Pharmago_ProductionStandardList_FullMethodName    = "/pb.Pharmago/ProductionStandardList"
	Pharmago_ProductionStandardCreate_FullMethodName  = "/pb.Pharmago/ProductionStandardCreate"
	Pharmago_ProductionStandardDetail_FullMethodName  = "/pb.Pharmago/ProductionStandardDetail"
	Pharmago_ProductionStandardUpdate_FullMethodName  = "/pb.Pharmago/ProductionStandardUpdate"
	Pharmago_ProductionStandardDelete_FullMethodName  = "/pb.Pharmago/ProductionStandardDelete"
	Pharmago_PreparationTypeList_FullMethodName       = "/pb.Pharmago/PreparationTypeList"
	Pharmago_PreparationTypeCreate_FullMethodName     = "/pb.Pharmago/PreparationTypeCreate"
	Pharmago_PreparationTypeDetail_FullMethodName     = "/pb.Pharmago/PreparationTypeDetail"
	Pharmago_PreparationTypeUpdate_FullMethodName     = "/pb.Pharmago/PreparationTypeUpdate"
	Pharmago_PreparationTypeDelete_FullMethodName     = "/pb.Pharmago/PreparationTypeDelete"
	Pharmago_CompanyPharmaList_FullMethodName         = "/pb.Pharmago/CompanyPharmaList"
	Pharmago_CompanyPharmaCreate_FullMethodName       = "/pb.Pharmago/CompanyPharmaCreate"
	Pharmago_CompanyPharmaDetail_FullMethodName       = "/pb.Pharmago/CompanyPharmaDetail"
	Pharmago_CompanyPharmaUpdate_FullMethodName       = "/pb.Pharmago/CompanyPharmaUpdate"
	Pharmago_CompanyPharmaDelete_FullMethodName       = "/pb.Pharmago/CompanyPharmaDelete"
	Pharmago_BrandList_FullMethodName                 = "/pb.Pharmago/BrandList"
	Pharmago_BrandCreate_FullMethodName               = "/pb.Pharmago/BrandCreate"
	Pharmago_BrandUpdate_FullMethodName               = "/pb.Pharmago/BrandUpdate"
	Pharmago_BrandDetail_FullMethodName               = "/pb.Pharmago/BrandDetail"
	Pharmago_BrandDelete_FullMethodName               = "/pb.Pharmago/BrandDelete"
	Pharmago_CategoryList_FullMethodName              = "/pb.Pharmago/CategoryList"
	Pharmago_CategoryCreate_FullMethodName            = "/pb.Pharmago/CategoryCreate"
	Pharmago_CategoryUpdate_FullMethodName            = "/pb.Pharmago/CategoryUpdate"
	Pharmago_CategoryDetail_FullMethodName            = "/pb.Pharmago/CategoryDetail"
	Pharmago_CategoryDelete_FullMethodName            = "/pb.Pharmago/CategoryDelete"
	Pharmago_ProductTypeList_FullMethodName           = "/pb.Pharmago/ProductTypeList"
	Pharmago_SupplierCreate_FullMethodName            = "/pb.Pharmago/SupplierCreate"
	Pharmago_SupplierList_FullMethodName              = "/pb.Pharmago/SupplierList"
	Pharmago_SupplierDetail_FullMethodName            = "/pb.Pharmago/SupplierDetail"
	Pharmago_SupplierUpdate_FullMethodName            = "/pb.Pharmago/SupplierUpdate"
	Pharmago_SupplierDelete_FullMethodName            = "/pb.Pharmago/SupplierDelete"
	Pharmago_WarehouseCreate_FullMethodName           = "/pb.Pharmago/WarehouseCreate"
	Pharmago_WarehouseList_FullMethodName             = "/pb.Pharmago/WarehouseList"
	Pharmago_WarehouseDetail_FullMethodName           = "/pb.Pharmago/WarehouseDetail"
	Pharmago_WarehouseUpdate_FullMethodName           = "/pb.Pharmago/WarehouseUpdate"
	Pharmago_WarehouseDelete_FullMethodName           = "/pb.Pharmago/WarehouseDelete"
	Pharmago_TicketCreate_FullMethodName              = "/pb.Pharmago/TicketCreate"
	Pharmago_TicketList_FullMethodName                = "/pb.Pharmago/TicketList"
	Pharmago_TicketDetail_FullMethodName              = "/pb.Pharmago/TicketDetail"
	Pharmago_TicketUpdateStatus_FullMethodName        = "/pb.Pharmago/TicketUpdateStatus"
	Pharmago_ConsignmentList_FullMethodName           = "/pb.Pharmago/ConsignmentList"
	Pharmago_OrderCreate_FullMethodName               = "/pb.Pharmago/OrderCreate"
	Pharmago_OrderList_FullMethodName                 = "/pb.Pharmago/OrderList"
	Pharmago_OrderListByMedicalBill_FullMethodName    = "/pb.Pharmago/OrderListByMedicalBill"
	Pharmago_OrderDetail_FullMethodName               = "/pb.Pharmago/OrderDetail"
	Pharmago_OrderUpdateStatus_FullMethodName         = "/pb.Pharmago/OrderUpdateStatus"
	Pharmago_OrderScan_FullMethodName                 = "/pb.Pharmago/OrderScan"
	Pharmago_CreatePaymentItemOrder_FullMethodName    = "/pb.Pharmago/CreatePaymentItemOrder"
	Pharmago_CustomerList_FullMethodName              = "/pb.Pharmago/CustomerList"
	Pharmago_CustomerCreate_FullMethodName            = "/pb.Pharmago/CustomerCreate"
	Pharmago_CustomerDetail_FullMethodName            = "/pb.Pharmago/CustomerDetail"
	Pharmago_CustomerUpdate_FullMethodName            = "/pb.Pharmago/CustomerUpdate"
	Pharmago_CustomerGroupList_FullMethodName         = "/pb.Pharmago/CustomerGroupList"
	Pharmago_CustomerGroupCreate_FullMethodName       = "/pb.Pharmago/CustomerGroupCreate"
	Pharmago_CustomerGroupDetail_FullMethodName       = "/pb.Pharmago/CustomerGroupDetail"
	Pharmago_CustomerGroupUpdate_FullMethodName       = "/pb.Pharmago/CustomerGroupUpdate"
	Pharmago_CustomerGroupDelete_FullMethodName       = "/pb.Pharmago/CustomerGroupDelete"
	Pharmago_MedicalRecordCreate_FullMethodName       = "/pb.Pharmago/MedicalRecordCreate"
	Pharmago_MedicalRecordCreateStream_FullMethodName = "/pb.Pharmago/MedicalRecordCreateStream"
	Pharmago_MedicalRecordList_FullMethodName         = "/pb.Pharmago/MedicalRecordList"
	Pharmago_MedicalRecordDelete_FullMethodName       = "/pb.Pharmago/MedicalRecordDelete"
	Pharmago_ImportCompany_FullMethodName             = "/pb.Pharmago/ImportCompany"
	Pharmago_ImportProduct_FullMethodName             = "/pb.Pharmago/ImportProduct"
	Pharmago_ImportProductMasterData_FullMethodName   = "/pb.Pharmago/ImportProductMasterData"
	Pharmago_ListDebtNote_FullMethodName              = "/pb.Pharmago/ListDebtNote"
	Pharmago_CreateDebtNote_FullMethodName            = "/pb.Pharmago/CreateDebtNote"
	Pharmago_DetailDebtNote_FullMethodName            = "/pb.Pharmago/DetailDebtNote"
	Pharmago_ReportDebtNote_FullMethodName            = "/pb.Pharmago/ReportDebtNote"
	Pharmago_CreateDebtRepayment_FullMethodName       = "/pb.Pharmago/CreateDebtRepayment"
	Pharmago_ServiceList_FullMethodName               = "/pb.Pharmago/ServiceList"
	Pharmago_ServicesByCustomer_FullMethodName        = "/pb.Pharmago/ServicesByCustomer"
	Pharmago_ServiceCreate_FullMethodName             = "/pb.Pharmago/ServiceCreate"
	Pharmago_ServiceDetail_FullMethodName             = "/pb.Pharmago/ServiceDetail"
	Pharmago_ServiceUpdate_FullMethodName             = "/pb.Pharmago/ServiceUpdate"
	Pharmago_ServiceDelete_FullMethodName             = "/pb.Pharmago/ServiceDelete"
	Pharmago_ConversationList_FullMethodName          = "/pb.Pharmago/ConversationList"
	Pharmago_MessageList_FullMethodName               = "/pb.Pharmago/MessageList"
	Pharmago_ListMedicalRecord_FullMethodName         = "/pb.Pharmago/ListMedicalRecord"
	Pharmago_CreateMedicalRecord_FullMethodName       = "/pb.Pharmago/CreateMedicalRecord"
	Pharmago_DetailMedicalRecord_FullMethodName       = "/pb.Pharmago/DetailMedicalRecord"
	Pharmago_ListNotification_FullMethodName          = "/pb.Pharmago/ListNotification"
	Pharmago_DetailNotification_FullMethodName        = "/pb.Pharmago/DetailNotification"
	Pharmago_SeenAllNoti_FullMethodName               = "/pb.Pharmago/SeenAllNoti"
	Pharmago_ScheduleCreate_FullMethodName            = "/pb.Pharmago/ScheduleCreate"
	Pharmago_ScheduleList_FullMethodName              = "/pb.Pharmago/ScheduleList"
	Pharmago_ScheduleDetail_FullMethodName            = "/pb.Pharmago/ScheduleDetail"
	Pharmago_ScheduleUpdate_FullMethodName            = "/pb.Pharmago/ScheduleUpdate"
	Pharmago_MedicalBillCreate_FullMethodName         = "/pb.Pharmago/MedicalBillCreate"
	Pharmago_MedicalBillList_FullMethodName           = "/pb.Pharmago/MedicalBillList"
	Pharmago_MedicalBillDetail_FullMethodName         = "/pb.Pharmago/MedicalBillDetail"
	Pharmago_MedicalBillUpdate_FullMethodName         = "/pb.Pharmago/MedicalBillUpdate"
	Pharmago_PrescriptionCreate_FullMethodName        = "/pb.Pharmago/PrescriptionCreate"
	Pharmago_PrescriptionUpdate_FullMethodName        = "/pb.Pharmago/PrescriptionUpdate"
	Pharmago_PrescriptionDetail_FullMethodName        = "/pb.Pharmago/PrescriptionDetail"
	Pharmago_PrescriptionList_FullMethodName          = "/pb.Pharmago/PrescriptionList"
)

// PharmagoClient is the client API for Pharmago service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharmagoClient interface {
	// TODO: ==================== Authentication ==========================
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponse, error)
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error)
	CheckPhone(ctx context.Context, in *CheckPhoneRequest, opts ...grpc.CallOption) (*CheckPhoneResponse, error)
	// TODO: ==================== Account ==========================
	AccountDetail(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	AccountInactive(ctx context.Context, in *AccountInactiveRequest, opts ...grpc.CallOption) (*AccountInactiveResponse, error)
	AccountList(ctx context.Context, in *AccountListRequest, opts ...grpc.CallOption) (*AccountListResponse, error)
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error)
	UpdateEmployee(ctx context.Context, in *EmployeeUpdateRequest, opts ...grpc.CallOption) (*EmployeeUpdateResponse, error)
	DetailEmployee(ctx context.Context, in *EmployeeDetailRequest, opts ...grpc.CallOption) (*EmployeeDetailResponse, error)
	AssignRoleEmployee(ctx context.Context, in *AssignRoleEmployeeRequest, opts ...grpc.CallOption) (*AssignRoleEmployeeResponse, error)
	DeleteEmployee(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	// TODO ================== APP ===================
	AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	// TODO ================== ROLE ===================
	RoleCreate(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*RoleCreateResponse, error)
	RoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error)
	RoleDetail(ctx context.Context, in *RoleDetailRequest, opts ...grpc.CallOption) (*RoleDetailResponse, error)
	RoleUpdate(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*RoleUpdateResponse, error)
	RoleDelete(ctx context.Context, in *RoleDeleteRequest, opts ...grpc.CallOption) (*RoleDeleteResponse, error)
	// TODO: ==================== REPORT ==========================
	HomeData(ctx context.Context, in *HomeDataRequest, opts ...grpc.CallOption) (*HomeDataResponse, error)
	ReportRevenue(ctx context.Context, in *ReportRevenueRequest, opts ...grpc.CallOption) (*ReportRevenueResponse, error)
	ReportOrder(ctx context.Context, in *ReportOrderRequest, opts ...grpc.CallOption) (*ReportOrderResponse, error)
	ReportCustomer(ctx context.Context, in *ReportCustomerRequest, opts ...grpc.CallOption) (*ReportCustomerResponse, error)
	ReportCustomerRevenue(ctx context.Context, in *ReportCustomerRevenueRequest, opts ...grpc.CallOption) (*ReportCustomerRevenueResponse, error)
	// TODO: ==================== COMPANY ==========================
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyDataRequest, opts ...grpc.CallOption) (*UpdateCompanyResponse, error)
	DetailCompany(ctx context.Context, in *DetailCompanyDataRequest, opts ...grpc.CallOption) (*DetailCompanyResponse, error)
	ListCompanies(ctx context.Context, in *GetCompaniesRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error)
	AssignEmployee(ctx context.Context, in *AssignCompanyReq, opts ...grpc.CallOption) (*AssignCompanyRes, error)
	// TODO: ==================== ADDRESS ==========================
	ListProvinces(ctx context.Context, in *ProvincesRequest, opts ...grpc.CallOption) (*ProvincesResponse, error)
	ListDistricts(ctx context.Context, in *DistrictsRequest, opts ...grpc.CallOption) (*DistrictsResponse, error)
	ListWards(ctx context.Context, in *WardsRequest, opts ...grpc.CallOption) (*WardsResponse, error)
	// ==================== PRODUCT ========================
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error)
	DetailProduct(ctx context.Context, in *DetailProductRequest, opts ...grpc.CallOption) (*DetailProductResponse, error)
	// ==================== PROMOTIONS ========================
	PromotionByProduct(ctx context.Context, in *PromotionByProductRequest, opts ...grpc.CallOption) (*PromotionByProductResponse, error)
	PromotionCheck(ctx context.Context, in *PromotionCheckRequest, opts ...grpc.CallOption) (*PromotionCheckResponse, error)
	PromotionCreate(ctx context.Context, in *PromotionCreateRequest, opts ...grpc.CallOption) (*PromotionCreateResponse, error)
	// TODO -------- VARIANT --------
	ListVariant(ctx context.Context, in *ListVariantRequest, opts ...grpc.CallOption) (*ListVariantResponse, error)
	VariantsCustomerBuy(ctx context.Context, in *VariantsCustomerBuyRequest, opts ...grpc.CallOption) (*VariantsCustomerBuyResponse, error)
	ScanVariant(ctx context.Context, opts ...grpc.CallOption) (Pharmago_ScanVariantClient, error)
	// TODO -------- PRICE_LIST --------
	GetPriceList(ctx context.Context, in *PriceListRequest, opts ...grpc.CallOption) (*PriceListResponse, error)
	DetailPriceList(ctx context.Context, in *DetailPriceListRequest, opts ...grpc.CallOption) (*DetailPriceListResponse, error)
	UpdatePriceList(ctx context.Context, in *UpdatePriceListRequest, opts ...grpc.CallOption) (*UpdatePriceListResponse, error)
	// TODO ================== PRODUCT MASTER DATA ===================
	ClassifyList(ctx context.Context, in *ClassifyListRequest, opts ...grpc.CallOption) (*ClassifyListResponse, error)
	ProductionStandardList(ctx context.Context, in *ProductionStandardListRequest, opts ...grpc.CallOption) (*ProductionStandardListResponse, error)
	ProductionStandardCreate(ctx context.Context, in *ProductionStandardCreateRequest, opts ...grpc.CallOption) (*ProductionStandardCreateResponse, error)
	ProductionStandardDetail(ctx context.Context, in *ProductionStandardDetailRequest, opts ...grpc.CallOption) (*ProductionStandardDetailResponse, error)
	ProductionStandardUpdate(ctx context.Context, in *ProductionStandardUpdateRequest, opts ...grpc.CallOption) (*ProductionStandardUpdateResponse, error)
	ProductionStandardDelete(ctx context.Context, in *ProductionStandardDeleteRequest, opts ...grpc.CallOption) (*ProductionStandardDeleteResponse, error)
	PreparationTypeList(ctx context.Context, in *PreparationTypeListRequest, opts ...grpc.CallOption) (*PreparationTypeListResponse, error)
	PreparationTypeCreate(ctx context.Context, in *PreparationTypeCreateRequest, opts ...grpc.CallOption) (*PreparationTypeCreateResponse, error)
	PreparationTypeDetail(ctx context.Context, in *PreparationTypeDetailRequest, opts ...grpc.CallOption) (*PreparationTypeDetailResponse, error)
	PreparationTypeUpdate(ctx context.Context, in *PreparationTypeUpdateRequest, opts ...grpc.CallOption) (*PreparationTypeUpdateResponse, error)
	PreparationTypeDelete(ctx context.Context, in *PreparationTypeDeleteRequest, opts ...grpc.CallOption) (*PreparationTypeDeleteResponse, error)
	// ================== Company Pharma ===================
	CompanyPharmaList(ctx context.Context, in *CompanyPharmaListRequest, opts ...grpc.CallOption) (*CompanyPharmaListResponse, error)
	CompanyPharmaCreate(ctx context.Context, in *CompanyPharmaCreateRequest, opts ...grpc.CallOption) (*CompanyPharmaCreateResponse, error)
	CompanyPharmaDetail(ctx context.Context, in *CompanyPharmaDetailRequest, opts ...grpc.CallOption) (*CompanyPharmaDetailResponse, error)
	CompanyPharmaUpdate(ctx context.Context, in *CompanyPharmaUpdateRequest, opts ...grpc.CallOption) (*CompanyPharmaUpdateResponse, error)
	CompanyPharmaDelete(ctx context.Context, in *CompanyPharmaDeleteRequest, opts ...grpc.CallOption) (*CompanyPharmaDeleteResponse, error)
	// TODO: ================== BRAND ===================
	BrandList(ctx context.Context, in *BrandListRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
	BrandCreate(ctx context.Context, in *BrandCreateRequest, opts ...grpc.CallOption) (*BrandCreateResponse, error)
	BrandUpdate(ctx context.Context, in *BrandUpdateRequest, opts ...grpc.CallOption) (*BrandUpdateResponse, error)
	BrandDetail(ctx context.Context, in *BrandDetailRequest, opts ...grpc.CallOption) (*BrandDetailResponse, error)
	BrandDelete(ctx context.Context, in *BrandDeleteRequest, opts ...grpc.CallOption) (*BrandDeleteResponse, error)
	// TODO: ================== CATEGORY ===================
	CategoryList(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	CategoryCreate(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error)
	CategoryUpdate(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*CategoryUpdateResponse, error)
	CategoryDetail(ctx context.Context, in *CategoryDetailRequest, opts ...grpc.CallOption) (*CategoryDetailResponse, error)
	CategoryDelete(ctx context.Context, in *CategoryDeleteRequest, opts ...grpc.CallOption) (*CategoryDeleteResponse, error)
	// ================== PRODUCT_TYPE ===================
	ProductTypeList(ctx context.Context, in *ProductTypeListRequest, opts ...grpc.CallOption) (*ProductTypeListResponse, error)
	// TODO: ================== SUPPLIER ===================
	SupplierCreate(ctx context.Context, in *SupplierCreateRequest, opts ...grpc.CallOption) (*SupplierCreateResponse, error)
	SupplierList(ctx context.Context, in *SupplierListRequest, opts ...grpc.CallOption) (*SupplierListResponse, error)
	SupplierDetail(ctx context.Context, in *SupplierDetailRequest, opts ...grpc.CallOption) (*SupplierDetailResponse, error)
	SupplierUpdate(ctx context.Context, in *SupplierUpdateRequest, opts ...grpc.CallOption) (*SupplierUpdateResponse, error)
	SupplierDelete(ctx context.Context, in *SupplierDeleteRequest, opts ...grpc.CallOption) (*SupplierDeleteResponse, error)
	// TODO ================== WAREHOUSE ===================
	WarehouseCreate(ctx context.Context, in *WarehouseCreateRequest, opts ...grpc.CallOption) (*WarehouseCreateResponse, error)
	WarehouseList(ctx context.Context, in *WarehouseListRequest, opts ...grpc.CallOption) (*WarehouseListResponse, error)
	WarehouseDetail(ctx context.Context, in *WarehouseDetailRequest, opts ...grpc.CallOption) (*WarehouseDetailResponse, error)
	WarehouseUpdate(ctx context.Context, in *WarehouseUpdateRequest, opts ...grpc.CallOption) (*WarehouseUpdateResponse, error)
	WarehouseDelete(ctx context.Context, in *WarehouseDeleteRequest, opts ...grpc.CallOption) (*WarehouseDeleteResponse, error)
	TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error)
	TicketList(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*TicketListResponse, error)
	TicketDetail(ctx context.Context, in *TicketDetailRequest, opts ...grpc.CallOption) (*TicketDetailResponse, error)
	TicketUpdateStatus(ctx context.Context, in *TicketUpdateStatusRequest, opts ...grpc.CallOption) (*TicketUpdateStatusResponse, error)
	ConsignmentList(ctx context.Context, in *ConsignmentListRequest, opts ...grpc.CallOption) (*ConsignmentListResponse, error)
	// ================== ORDER ===================
	OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
	OrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
	OrderListByMedicalBill(ctx context.Context, in *OrdersByMedicalBillRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
	OrderDetail(ctx context.Context, in *OrderDetailRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error)
	OrderUpdateStatus(ctx context.Context, in *OrderUpdateStatusRequest, opts ...grpc.CallOption) (*OrderUpdateStatusResponse, error)
	OrderScan(ctx context.Context, in *OrderScanRequest, opts ...grpc.CallOption) (*OrderScanResponse, error)
	CreatePaymentItemOrder(ctx context.Context, in *PaymentItemOrderRequest, opts ...grpc.CallOption) (*PaymentItemOrderResponse, error)
	// ================== CUSTOMER ===================
	CustomerList(ctx context.Context, in *CustomerListRequest, opts ...grpc.CallOption) (*CustomerListResponse, error)
	CustomerCreate(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*CustomerCreateResponse, error)
	CustomerDetail(ctx context.Context, in *CustomerDetailRequest, opts ...grpc.CallOption) (*CustomerDetailResponse, error)
	CustomerUpdate(ctx context.Context, in *CustomerUpdateRequest, opts ...grpc.CallOption) (*CustomerUpdateResponse, error)
	CustomerGroupList(ctx context.Context, in *CustomerGroupListRequest, opts ...grpc.CallOption) (*CustomerGroupListResponse, error)
	CustomerGroupCreate(ctx context.Context, in *CustomerGroupCreateRequest, opts ...grpc.CallOption) (*CustomerGroupCreateResponse, error)
	CustomerGroupDetail(ctx context.Context, in *CustomerGroupDetailRequest, opts ...grpc.CallOption) (*CustomerGroupDetailResponse, error)
	CustomerGroupUpdate(ctx context.Context, in *CustomerGroupUpdateRequest, opts ...grpc.CallOption) (*CustomerGroupUpdateResponse, error)
	CustomerGroupDelete(ctx context.Context, in *CustomerGroupDeleteRequest, opts ...grpc.CallOption) (*CustomerGroupDeleteResponse, error)
	MedicalRecordCreate(ctx context.Context, in *MedicalRecordCreateRequest, opts ...grpc.CallOption) (*MedicalRecordCreateResponse, error)
	MedicalRecordCreateStream(ctx context.Context, in *MedicalRecordCreateRequest, opts ...grpc.CallOption) (Pharmago_MedicalRecordCreateStreamClient, error)
	MedicalRecordList(ctx context.Context, in *MedicalRecordListRequest, opts ...grpc.CallOption) (*MedicalRecordListResponse, error)
	MedicalRecordDelete(ctx context.Context, in *MedicalRecordDeleteRequest, opts ...grpc.CallOption) (*MedicalRecordDeleteResponse, error)
	// ================== IMPORT ===================
	ImportCompany(ctx context.Context, in *ImportCompanyRequest, opts ...grpc.CallOption) (*ImportCompanyResponse, error)
	ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error)
	ImportProductMasterData(ctx context.Context, in *ImportProductMasterDataRequest, opts ...grpc.CallOption) (*ImportProductMasterDataResponse, error)
	// ================== DEBT NOTE ===================
	ListDebtNote(ctx context.Context, in *ListDebtNoteRequest, opts ...grpc.CallOption) (*ListDebtNoteResponse, error)
	CreateDebtNote(ctx context.Context, in *CreateDebtNoteRequest, opts ...grpc.CallOption) (*CreateDebtNoteResponse, error)
	DetailDebtNote(ctx context.Context, in *DetailDebtNoteRequest, opts ...grpc.CallOption) (*DetailDebtNoteResponse, error)
	ReportDebtNote(ctx context.Context, in *ReportDebtNoteRequest, opts ...grpc.CallOption) (*ReportDebtNoteResponse, error)
	CreateDebtRepayment(ctx context.Context, in *CreateDebtRepaymentRequest, opts ...grpc.CallOption) (*CreateDebtRepaymentResponse, error)
	// ================== SERVICE ===================
	ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error)
	ServicesByCustomer(ctx context.Context, in *ServicesByCustomerRequest, opts ...grpc.CallOption) (*ServicesByCustomerResponse, error)
	ServiceCreate(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateResponse, error)
	ServiceDetail(ctx context.Context, in *ServiceDetailRequest, opts ...grpc.CallOption) (*ServiceDetailResponse, error)
	ServiceUpdate(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceUpdateResponse, error)
	ServiceDelete(ctx context.Context, in *ServiceDeleteRequest, opts ...grpc.CallOption) (*ServiceDeleteResponse, error)
	// ================== CONVERSATION ===================
	ConversationList(ctx context.Context, in *ListConversationRequest, opts ...grpc.CallOption) (*ListConversationResponse, error)
	MessageList(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error)
	// ================== MEDICAL RECORD ===================
	ListMedicalRecord(ctx context.Context, in *ListMedicalRecordRequest, opts ...grpc.CallOption) (*ListMedicalRecordResponse, error)
	CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*CreateMedicalRecordResponse, error)
	DetailMedicalRecord(ctx context.Context, in *DetailMedicalRecordRequest, opts ...grpc.CallOption) (*DetailMedicalRecordResponse, error)
	// ================== NOTIFICATION ===================
	ListNotification(ctx context.Context, in *ListNotificationRequest, opts ...grpc.CallOption) (*ListNotificationResponse, error)
	DetailNotification(ctx context.Context, in *DetailNotificationRequest, opts ...grpc.CallOption) (*DetailNotificationResponse, error)
	SeenAllNoti(ctx context.Context, in *SeenAllNotiRequest, opts ...grpc.CallOption) (*SeenAllNotiResponse, error)
	// ================== AppointmentSchedule ===================
	ScheduleCreate(ctx context.Context, in *AppointmentSchedule, opts ...grpc.CallOption) (*AppointmentScheduleResponse, error)
	ScheduleList(ctx context.Context, in *AppointmentScheduleListRequest, opts ...grpc.CallOption) (*AppointmentScheduleListResponse, error)
	ScheduleDetail(ctx context.Context, in *AppointmentSchedule, opts ...grpc.CallOption) (*AppointmentScheduleResponse, error)
	ScheduleUpdate(ctx context.Context, in *AppointmentScheduleUpdateRequest, opts ...grpc.CallOption) (*AppointmentScheduleUpdateResponse, error)
	// ================== MedicalBill ===================
	MedicalBillCreate(ctx context.Context, in *MedicalBill, opts ...grpc.CallOption) (*MedicalBillResponse, error)
	MedicalBillList(ctx context.Context, in *MedicalBillListRequest, opts ...grpc.CallOption) (*MedicalBillListResponse, error)
	MedicalBillDetail(ctx context.Context, in *MedicalBill, opts ...grpc.CallOption) (*MedicalBillResponse, error)
	MedicalBillUpdate(ctx context.Context, in *MedicalBillUpdateRequest, opts ...grpc.CallOption) (*MedicalBillUpdateResponse, error)
	// ================== PRESCRIPTION ===================
	PrescriptionCreate(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*PrescriptionResponse, error)
	PrescriptionUpdate(ctx context.Context, in *PrescriptionUpdateRequest, opts ...grpc.CallOption) (*PrescriptionUpdateResponse, error)
	PrescriptionDetail(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*PrescriptionResponse, error)
	PrescriptionList(ctx context.Context, in *PrescriptionListRequest, opts ...grpc.CallOption) (*PrescriptionListResponse, error)
}

type pharmagoClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmagoClient(cc grpc.ClientConnInterface) PharmagoClient {
	return &pharmagoClient{cc}
}

func (c *pharmagoClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Pharmago_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, Pharmago_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponse, error) {
	out := new(VerifyAccountResponse)
	err := c.cc.Invoke(ctx, Pharmago_VerifyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	out := new(SendCodeResponse)
	err := c.cc.Invoke(ctx, Pharmago_SendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error) {
	out := new(VerifyCodeResponse)
	err := c.cc.Invoke(ctx, Pharmago_VerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Pharmago_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error) {
	out := new(CheckEmailResponse)
	err := c.cc.Invoke(ctx, Pharmago_CheckEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CheckPhone(ctx context.Context, in *CheckPhoneRequest, opts ...grpc.CallOption) (*CheckPhoneResponse, error) {
	out := new(CheckPhoneResponse)
	err := c.cc.Invoke(ctx, Pharmago_CheckPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AccountDetail(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_AccountDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AccountInactive(ctx context.Context, in *AccountInactiveRequest, opts ...grpc.CallOption) (*AccountInactiveResponse, error) {
	out := new(AccountInactiveResponse)
	err := c.cc.Invoke(ctx, Pharmago_AccountInactive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AccountList(ctx context.Context, in *AccountListRequest, opts ...grpc.CallOption) (*AccountListResponse, error) {
	out := new(AccountListResponse)
	err := c.cc.Invoke(ctx, Pharmago_AccountList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error) {
	out := new(CreateEmployeeResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) UpdateEmployee(ctx context.Context, in *EmployeeUpdateRequest, opts ...grpc.CallOption) (*EmployeeUpdateResponse, error) {
	out := new(EmployeeUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_UpdateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailEmployee(ctx context.Context, in *EmployeeDetailRequest, opts ...grpc.CallOption) (*EmployeeDetailResponse, error) {
	out := new(EmployeeDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AssignRoleEmployee(ctx context.Context, in *AssignRoleEmployeeRequest, opts ...grpc.CallOption) (*AssignRoleEmployeeResponse, error) {
	out := new(AssignRoleEmployeeResponse)
	err := c.cc.Invoke(ctx, Pharmago_AssignRoleEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DeleteEmployee(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_DeleteEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, Pharmago_AppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) RoleCreate(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*RoleCreateResponse, error) {
	out := new(RoleCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_RoleCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) RoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error) {
	out := new(RoleListResponse)
	err := c.cc.Invoke(ctx, Pharmago_RoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) RoleDetail(ctx context.Context, in *RoleDetailRequest, opts ...grpc.CallOption) (*RoleDetailResponse, error) {
	out := new(RoleDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_RoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) RoleUpdate(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*RoleUpdateResponse, error) {
	out := new(RoleUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_RoleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) RoleDelete(ctx context.Context, in *RoleDeleteRequest, opts ...grpc.CallOption) (*RoleDeleteResponse, error) {
	out := new(RoleDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_RoleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) HomeData(ctx context.Context, in *HomeDataRequest, opts ...grpc.CallOption) (*HomeDataResponse, error) {
	out := new(HomeDataResponse)
	err := c.cc.Invoke(ctx, Pharmago_HomeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ReportRevenue(ctx context.Context, in *ReportRevenueRequest, opts ...grpc.CallOption) (*ReportRevenueResponse, error) {
	out := new(ReportRevenueResponse)
	err := c.cc.Invoke(ctx, Pharmago_ReportRevenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ReportOrder(ctx context.Context, in *ReportOrderRequest, opts ...grpc.CallOption) (*ReportOrderResponse, error) {
	out := new(ReportOrderResponse)
	err := c.cc.Invoke(ctx, Pharmago_ReportOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ReportCustomer(ctx context.Context, in *ReportCustomerRequest, opts ...grpc.CallOption) (*ReportCustomerResponse, error) {
	out := new(ReportCustomerResponse)
	err := c.cc.Invoke(ctx, Pharmago_ReportCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ReportCustomerRevenue(ctx context.Context, in *ReportCustomerRevenueRequest, opts ...grpc.CallOption) (*ReportCustomerRevenueResponse, error) {
	out := new(ReportCustomerRevenueResponse)
	err := c.cc.Invoke(ctx, Pharmago_ReportCustomerRevenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error) {
	out := new(CreateCompanyResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) UpdateCompany(ctx context.Context, in *UpdateCompanyDataRequest, opts ...grpc.CallOption) (*UpdateCompanyResponse, error) {
	out := new(UpdateCompanyResponse)
	err := c.cc.Invoke(ctx, Pharmago_UpdateCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailCompany(ctx context.Context, in *DetailCompanyDataRequest, opts ...grpc.CallOption) (*DetailCompanyResponse, error) {
	out := new(DetailCompanyResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListCompanies(ctx context.Context, in *GetCompaniesRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error) {
	out := new(GetCompaniesResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) AssignEmployee(ctx context.Context, in *AssignCompanyReq, opts ...grpc.CallOption) (*AssignCompanyRes, error) {
	out := new(AssignCompanyRes)
	err := c.cc.Invoke(ctx, Pharmago_AssignEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListProvinces(ctx context.Context, in *ProvincesRequest, opts ...grpc.CallOption) (*ProvincesResponse, error) {
	out := new(ProvincesResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListProvinces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListDistricts(ctx context.Context, in *DistrictsRequest, opts ...grpc.CallOption) (*DistrictsResponse, error) {
	out := new(DistrictsResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListDistricts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListWards(ctx context.Context, in *WardsRequest, opts ...grpc.CallOption) (*WardsResponse, error) {
	out := new(WardsResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListWards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) UpdateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailProduct(ctx context.Context, in *DetailProductRequest, opts ...grpc.CallOption) (*DetailProductResponse, error) {
	out := new(DetailProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PromotionByProduct(ctx context.Context, in *PromotionByProductRequest, opts ...grpc.CallOption) (*PromotionByProductResponse, error) {
	out := new(PromotionByProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_PromotionByProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PromotionCheck(ctx context.Context, in *PromotionCheckRequest, opts ...grpc.CallOption) (*PromotionCheckResponse, error) {
	out := new(PromotionCheckResponse)
	err := c.cc.Invoke(ctx, Pharmago_PromotionCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PromotionCreate(ctx context.Context, in *PromotionCreateRequest, opts ...grpc.CallOption) (*PromotionCreateResponse, error) {
	out := new(PromotionCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_PromotionCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListVariant(ctx context.Context, in *ListVariantRequest, opts ...grpc.CallOption) (*ListVariantResponse, error) {
	out := new(ListVariantResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) VariantsCustomerBuy(ctx context.Context, in *VariantsCustomerBuyRequest, opts ...grpc.CallOption) (*VariantsCustomerBuyResponse, error) {
	out := new(VariantsCustomerBuyResponse)
	err := c.cc.Invoke(ctx, Pharmago_VariantsCustomerBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ScanVariant(ctx context.Context, opts ...grpc.CallOption) (Pharmago_ScanVariantClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pharmago_ServiceDesc.Streams[0], Pharmago_ScanVariant_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pharmagoScanVariantClient{stream}
	return x, nil
}

type Pharmago_ScanVariantClient interface {
	Send(*VariantScanRequest) error
	Recv() (*VariantScanResponse, error)
	grpc.ClientStream
}

type pharmagoScanVariantClient struct {
	grpc.ClientStream
}

func (x *pharmagoScanVariantClient) Send(m *VariantScanRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pharmagoScanVariantClient) Recv() (*VariantScanResponse, error) {
	m := new(VariantScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pharmagoClient) GetPriceList(ctx context.Context, in *PriceListRequest, opts ...grpc.CallOption) (*PriceListResponse, error) {
	out := new(PriceListResponse)
	err := c.cc.Invoke(ctx, Pharmago_GetPriceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailPriceList(ctx context.Context, in *DetailPriceListRequest, opts ...grpc.CallOption) (*DetailPriceListResponse, error) {
	out := new(DetailPriceListResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailPriceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) UpdatePriceList(ctx context.Context, in *UpdatePriceListRequest, opts ...grpc.CallOption) (*UpdatePriceListResponse, error) {
	out := new(UpdatePriceListResponse)
	err := c.cc.Invoke(ctx, Pharmago_UpdatePriceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ClassifyList(ctx context.Context, in *ClassifyListRequest, opts ...grpc.CallOption) (*ClassifyListResponse, error) {
	out := new(ClassifyListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ClassifyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductionStandardList(ctx context.Context, in *ProductionStandardListRequest, opts ...grpc.CallOption) (*ProductionStandardListResponse, error) {
	out := new(ProductionStandardListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductionStandardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductionStandardCreate(ctx context.Context, in *ProductionStandardCreateRequest, opts ...grpc.CallOption) (*ProductionStandardCreateResponse, error) {
	out := new(ProductionStandardCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductionStandardCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductionStandardDetail(ctx context.Context, in *ProductionStandardDetailRequest, opts ...grpc.CallOption) (*ProductionStandardDetailResponse, error) {
	out := new(ProductionStandardDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductionStandardDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductionStandardUpdate(ctx context.Context, in *ProductionStandardUpdateRequest, opts ...grpc.CallOption) (*ProductionStandardUpdateResponse, error) {
	out := new(ProductionStandardUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductionStandardUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductionStandardDelete(ctx context.Context, in *ProductionStandardDeleteRequest, opts ...grpc.CallOption) (*ProductionStandardDeleteResponse, error) {
	out := new(ProductionStandardDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductionStandardDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PreparationTypeList(ctx context.Context, in *PreparationTypeListRequest, opts ...grpc.CallOption) (*PreparationTypeListResponse, error) {
	out := new(PreparationTypeListResponse)
	err := c.cc.Invoke(ctx, Pharmago_PreparationTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PreparationTypeCreate(ctx context.Context, in *PreparationTypeCreateRequest, opts ...grpc.CallOption) (*PreparationTypeCreateResponse, error) {
	out := new(PreparationTypeCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_PreparationTypeCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PreparationTypeDetail(ctx context.Context, in *PreparationTypeDetailRequest, opts ...grpc.CallOption) (*PreparationTypeDetailResponse, error) {
	out := new(PreparationTypeDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_PreparationTypeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PreparationTypeUpdate(ctx context.Context, in *PreparationTypeUpdateRequest, opts ...grpc.CallOption) (*PreparationTypeUpdateResponse, error) {
	out := new(PreparationTypeUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_PreparationTypeUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PreparationTypeDelete(ctx context.Context, in *PreparationTypeDeleteRequest, opts ...grpc.CallOption) (*PreparationTypeDeleteResponse, error) {
	out := new(PreparationTypeDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_PreparationTypeDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CompanyPharmaList(ctx context.Context, in *CompanyPharmaListRequest, opts ...grpc.CallOption) (*CompanyPharmaListResponse, error) {
	out := new(CompanyPharmaListResponse)
	err := c.cc.Invoke(ctx, Pharmago_CompanyPharmaList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CompanyPharmaCreate(ctx context.Context, in *CompanyPharmaCreateRequest, opts ...grpc.CallOption) (*CompanyPharmaCreateResponse, error) {
	out := new(CompanyPharmaCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CompanyPharmaCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CompanyPharmaDetail(ctx context.Context, in *CompanyPharmaDetailRequest, opts ...grpc.CallOption) (*CompanyPharmaDetailResponse, error) {
	out := new(CompanyPharmaDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_CompanyPharmaDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CompanyPharmaUpdate(ctx context.Context, in *CompanyPharmaUpdateRequest, opts ...grpc.CallOption) (*CompanyPharmaUpdateResponse, error) {
	out := new(CompanyPharmaUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CompanyPharmaUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CompanyPharmaDelete(ctx context.Context, in *CompanyPharmaDeleteRequest, opts ...grpc.CallOption) (*CompanyPharmaDeleteResponse, error) {
	out := new(CompanyPharmaDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_CompanyPharmaDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) BrandList(ctx context.Context, in *BrandListRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	out := new(BrandListResponse)
	err := c.cc.Invoke(ctx, Pharmago_BrandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) BrandCreate(ctx context.Context, in *BrandCreateRequest, opts ...grpc.CallOption) (*BrandCreateResponse, error) {
	out := new(BrandCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_BrandCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) BrandUpdate(ctx context.Context, in *BrandUpdateRequest, opts ...grpc.CallOption) (*BrandUpdateResponse, error) {
	out := new(BrandUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_BrandUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) BrandDetail(ctx context.Context, in *BrandDetailRequest, opts ...grpc.CallOption) (*BrandDetailResponse, error) {
	out := new(BrandDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_BrandDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) BrandDelete(ctx context.Context, in *BrandDeleteRequest, opts ...grpc.CallOption) (*BrandDeleteResponse, error) {
	out := new(BrandDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_BrandDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CategoryList(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, Pharmago_CategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CategoryCreate(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error) {
	out := new(CategoryCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CategoryCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CategoryUpdate(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*CategoryUpdateResponse, error) {
	out := new(CategoryUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CategoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CategoryDetail(ctx context.Context, in *CategoryDetailRequest, opts ...grpc.CallOption) (*CategoryDetailResponse, error) {
	out := new(CategoryDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_CategoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CategoryDelete(ctx context.Context, in *CategoryDeleteRequest, opts ...grpc.CallOption) (*CategoryDeleteResponse, error) {
	out := new(CategoryDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_CategoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ProductTypeList(ctx context.Context, in *ProductTypeListRequest, opts ...grpc.CallOption) (*ProductTypeListResponse, error) {
	out := new(ProductTypeListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ProductTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SupplierCreate(ctx context.Context, in *SupplierCreateRequest, opts ...grpc.CallOption) (*SupplierCreateResponse, error) {
	out := new(SupplierCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_SupplierCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SupplierList(ctx context.Context, in *SupplierListRequest, opts ...grpc.CallOption) (*SupplierListResponse, error) {
	out := new(SupplierListResponse)
	err := c.cc.Invoke(ctx, Pharmago_SupplierList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SupplierDetail(ctx context.Context, in *SupplierDetailRequest, opts ...grpc.CallOption) (*SupplierDetailResponse, error) {
	out := new(SupplierDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_SupplierDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SupplierUpdate(ctx context.Context, in *SupplierUpdateRequest, opts ...grpc.CallOption) (*SupplierUpdateResponse, error) {
	out := new(SupplierUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_SupplierUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SupplierDelete(ctx context.Context, in *SupplierDeleteRequest, opts ...grpc.CallOption) (*SupplierDeleteResponse, error) {
	out := new(SupplierDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_SupplierDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) WarehouseCreate(ctx context.Context, in *WarehouseCreateRequest, opts ...grpc.CallOption) (*WarehouseCreateResponse, error) {
	out := new(WarehouseCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_WarehouseCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) WarehouseList(ctx context.Context, in *WarehouseListRequest, opts ...grpc.CallOption) (*WarehouseListResponse, error) {
	out := new(WarehouseListResponse)
	err := c.cc.Invoke(ctx, Pharmago_WarehouseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) WarehouseDetail(ctx context.Context, in *WarehouseDetailRequest, opts ...grpc.CallOption) (*WarehouseDetailResponse, error) {
	out := new(WarehouseDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_WarehouseDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) WarehouseUpdate(ctx context.Context, in *WarehouseUpdateRequest, opts ...grpc.CallOption) (*WarehouseUpdateResponse, error) {
	out := new(WarehouseUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_WarehouseUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) WarehouseDelete(ctx context.Context, in *WarehouseDeleteRequest, opts ...grpc.CallOption) (*WarehouseDeleteResponse, error) {
	out := new(WarehouseDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_WarehouseDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) TicketCreate(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error) {
	out := new(TicketCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_TicketCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) TicketList(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*TicketListResponse, error) {
	out := new(TicketListResponse)
	err := c.cc.Invoke(ctx, Pharmago_TicketList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) TicketDetail(ctx context.Context, in *TicketDetailRequest, opts ...grpc.CallOption) (*TicketDetailResponse, error) {
	out := new(TicketDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_TicketDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) TicketUpdateStatus(ctx context.Context, in *TicketUpdateStatusRequest, opts ...grpc.CallOption) (*TicketUpdateStatusResponse, error) {
	out := new(TicketUpdateStatusResponse)
	err := c.cc.Invoke(ctx, Pharmago_TicketUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ConsignmentList(ctx context.Context, in *ConsignmentListRequest, opts ...grpc.CallOption) (*ConsignmentListResponse, error) {
	out := new(ConsignmentListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ConsignmentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderListByMedicalBill(ctx context.Context, in *OrdersByMedicalBillRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderListByMedicalBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderDetail(ctx context.Context, in *OrderDetailRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error) {
	out := new(OrderDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderUpdateStatus(ctx context.Context, in *OrderUpdateStatusRequest, opts ...grpc.CallOption) (*OrderUpdateStatusResponse, error) {
	out := new(OrderUpdateStatusResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) OrderScan(ctx context.Context, in *OrderScanRequest, opts ...grpc.CallOption) (*OrderScanResponse, error) {
	out := new(OrderScanResponse)
	err := c.cc.Invoke(ctx, Pharmago_OrderScan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreatePaymentItemOrder(ctx context.Context, in *PaymentItemOrderRequest, opts ...grpc.CallOption) (*PaymentItemOrderResponse, error) {
	out := new(PaymentItemOrderResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreatePaymentItemOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerList(ctx context.Context, in *CustomerListRequest, opts ...grpc.CallOption) (*CustomerListResponse, error) {
	out := new(CustomerListResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerCreate(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*CustomerCreateResponse, error) {
	out := new(CustomerCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerDetail(ctx context.Context, in *CustomerDetailRequest, opts ...grpc.CallOption) (*CustomerDetailResponse, error) {
	out := new(CustomerDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerUpdate(ctx context.Context, in *CustomerUpdateRequest, opts ...grpc.CallOption) (*CustomerUpdateResponse, error) {
	out := new(CustomerUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerGroupList(ctx context.Context, in *CustomerGroupListRequest, opts ...grpc.CallOption) (*CustomerGroupListResponse, error) {
	out := new(CustomerGroupListResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerGroupCreate(ctx context.Context, in *CustomerGroupCreateRequest, opts ...grpc.CallOption) (*CustomerGroupCreateResponse, error) {
	out := new(CustomerGroupCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerGroupCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerGroupDetail(ctx context.Context, in *CustomerGroupDetailRequest, opts ...grpc.CallOption) (*CustomerGroupDetailResponse, error) {
	out := new(CustomerGroupDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerGroupDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerGroupUpdate(ctx context.Context, in *CustomerGroupUpdateRequest, opts ...grpc.CallOption) (*CustomerGroupUpdateResponse, error) {
	out := new(CustomerGroupUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerGroupUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CustomerGroupDelete(ctx context.Context, in *CustomerGroupDeleteRequest, opts ...grpc.CallOption) (*CustomerGroupDeleteResponse, error) {
	out := new(CustomerGroupDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_CustomerGroupDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalRecordCreate(ctx context.Context, in *MedicalRecordCreateRequest, opts ...grpc.CallOption) (*MedicalRecordCreateResponse, error) {
	out := new(MedicalRecordCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalRecordCreateStream(ctx context.Context, in *MedicalRecordCreateRequest, opts ...grpc.CallOption) (Pharmago_MedicalRecordCreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pharmago_ServiceDesc.Streams[1], Pharmago_MedicalRecordCreateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pharmagoMedicalRecordCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pharmago_MedicalRecordCreateStreamClient interface {
	Recv() (*MedicalRecordCreateResponse, error)
	grpc.ClientStream
}

type pharmagoMedicalRecordCreateStreamClient struct {
	grpc.ClientStream
}

func (x *pharmagoMedicalRecordCreateStreamClient) Recv() (*MedicalRecordCreateResponse, error) {
	m := new(MedicalRecordCreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pharmagoClient) MedicalRecordList(ctx context.Context, in *MedicalRecordListRequest, opts ...grpc.CallOption) (*MedicalRecordListResponse, error) {
	out := new(MedicalRecordListResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalRecordDelete(ctx context.Context, in *MedicalRecordDeleteRequest, opts ...grpc.CallOption) (*MedicalRecordDeleteResponse, error) {
	out := new(MedicalRecordDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalRecordDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ImportCompany(ctx context.Context, in *ImportCompanyRequest, opts ...grpc.CallOption) (*ImportCompanyResponse, error) {
	out := new(ImportCompanyResponse)
	err := c.cc.Invoke(ctx, Pharmago_ImportCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error) {
	out := new(ImportProductResponse)
	err := c.cc.Invoke(ctx, Pharmago_ImportProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ImportProductMasterData(ctx context.Context, in *ImportProductMasterDataRequest, opts ...grpc.CallOption) (*ImportProductMasterDataResponse, error) {
	out := new(ImportProductMasterDataResponse)
	err := c.cc.Invoke(ctx, Pharmago_ImportProductMasterData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListDebtNote(ctx context.Context, in *ListDebtNoteRequest, opts ...grpc.CallOption) (*ListDebtNoteResponse, error) {
	out := new(ListDebtNoteResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListDebtNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateDebtNote(ctx context.Context, in *CreateDebtNoteRequest, opts ...grpc.CallOption) (*CreateDebtNoteResponse, error) {
	out := new(CreateDebtNoteResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateDebtNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailDebtNote(ctx context.Context, in *DetailDebtNoteRequest, opts ...grpc.CallOption) (*DetailDebtNoteResponse, error) {
	out := new(DetailDebtNoteResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailDebtNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ReportDebtNote(ctx context.Context, in *ReportDebtNoteRequest, opts ...grpc.CallOption) (*ReportDebtNoteResponse, error) {
	out := new(ReportDebtNoteResponse)
	err := c.cc.Invoke(ctx, Pharmago_ReportDebtNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateDebtRepayment(ctx context.Context, in *CreateDebtRepaymentRequest, opts ...grpc.CallOption) (*CreateDebtRepaymentResponse, error) {
	out := new(CreateDebtRepaymentResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateDebtRepayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error) {
	out := new(ServiceListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServicesByCustomer(ctx context.Context, in *ServicesByCustomerRequest, opts ...grpc.CallOption) (*ServicesByCustomerResponse, error) {
	out := new(ServicesByCustomerResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServicesByCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServiceCreate(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateResponse, error) {
	out := new(ServiceCreateResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServiceCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServiceDetail(ctx context.Context, in *ServiceDetailRequest, opts ...grpc.CallOption) (*ServiceDetailResponse, error) {
	out := new(ServiceDetailResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServiceDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServiceUpdate(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceUpdateResponse, error) {
	out := new(ServiceUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServiceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ServiceDelete(ctx context.Context, in *ServiceDeleteRequest, opts ...grpc.CallOption) (*ServiceDeleteResponse, error) {
	out := new(ServiceDeleteResponse)
	err := c.cc.Invoke(ctx, Pharmago_ServiceDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ConversationList(ctx context.Context, in *ListConversationRequest, opts ...grpc.CallOption) (*ListConversationResponse, error) {
	out := new(ListConversationResponse)
	err := c.cc.Invoke(ctx, Pharmago_ConversationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MessageList(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error) {
	out := new(ListMessageResponse)
	err := c.cc.Invoke(ctx, Pharmago_MessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListMedicalRecord(ctx context.Context, in *ListMedicalRecordRequest, opts ...grpc.CallOption) (*ListMedicalRecordResponse, error) {
	out := new(ListMedicalRecordResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListMedicalRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*CreateMedicalRecordResponse, error) {
	out := new(CreateMedicalRecordResponse)
	err := c.cc.Invoke(ctx, Pharmago_CreateMedicalRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailMedicalRecord(ctx context.Context, in *DetailMedicalRecordRequest, opts ...grpc.CallOption) (*DetailMedicalRecordResponse, error) {
	out := new(DetailMedicalRecordResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailMedicalRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ListNotification(ctx context.Context, in *ListNotificationRequest, opts ...grpc.CallOption) (*ListNotificationResponse, error) {
	out := new(ListNotificationResponse)
	err := c.cc.Invoke(ctx, Pharmago_ListNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) DetailNotification(ctx context.Context, in *DetailNotificationRequest, opts ...grpc.CallOption) (*DetailNotificationResponse, error) {
	out := new(DetailNotificationResponse)
	err := c.cc.Invoke(ctx, Pharmago_DetailNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) SeenAllNoti(ctx context.Context, in *SeenAllNotiRequest, opts ...grpc.CallOption) (*SeenAllNotiResponse, error) {
	out := new(SeenAllNotiResponse)
	err := c.cc.Invoke(ctx, Pharmago_SeenAllNoti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ScheduleCreate(ctx context.Context, in *AppointmentSchedule, opts ...grpc.CallOption) (*AppointmentScheduleResponse, error) {
	out := new(AppointmentScheduleResponse)
	err := c.cc.Invoke(ctx, Pharmago_ScheduleCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ScheduleList(ctx context.Context, in *AppointmentScheduleListRequest, opts ...grpc.CallOption) (*AppointmentScheduleListResponse, error) {
	out := new(AppointmentScheduleListResponse)
	err := c.cc.Invoke(ctx, Pharmago_ScheduleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ScheduleDetail(ctx context.Context, in *AppointmentSchedule, opts ...grpc.CallOption) (*AppointmentScheduleResponse, error) {
	out := new(AppointmentScheduleResponse)
	err := c.cc.Invoke(ctx, Pharmago_ScheduleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) ScheduleUpdate(ctx context.Context, in *AppointmentScheduleUpdateRequest, opts ...grpc.CallOption) (*AppointmentScheduleUpdateResponse, error) {
	out := new(AppointmentScheduleUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_ScheduleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalBillCreate(ctx context.Context, in *MedicalBill, opts ...grpc.CallOption) (*MedicalBillResponse, error) {
	out := new(MedicalBillResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalBillCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalBillList(ctx context.Context, in *MedicalBillListRequest, opts ...grpc.CallOption) (*MedicalBillListResponse, error) {
	out := new(MedicalBillListResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalBillList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalBillDetail(ctx context.Context, in *MedicalBill, opts ...grpc.CallOption) (*MedicalBillResponse, error) {
	out := new(MedicalBillResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalBillDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) MedicalBillUpdate(ctx context.Context, in *MedicalBillUpdateRequest, opts ...grpc.CallOption) (*MedicalBillUpdateResponse, error) {
	out := new(MedicalBillUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_MedicalBillUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PrescriptionCreate(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*PrescriptionResponse, error) {
	out := new(PrescriptionResponse)
	err := c.cc.Invoke(ctx, Pharmago_PrescriptionCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PrescriptionUpdate(ctx context.Context, in *PrescriptionUpdateRequest, opts ...grpc.CallOption) (*PrescriptionUpdateResponse, error) {
	out := new(PrescriptionUpdateResponse)
	err := c.cc.Invoke(ctx, Pharmago_PrescriptionUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PrescriptionDetail(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*PrescriptionResponse, error) {
	out := new(PrescriptionResponse)
	err := c.cc.Invoke(ctx, Pharmago_PrescriptionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmagoClient) PrescriptionList(ctx context.Context, in *PrescriptionListRequest, opts ...grpc.CallOption) (*PrescriptionListResponse, error) {
	out := new(PrescriptionListResponse)
	err := c.cc.Invoke(ctx, Pharmago_PrescriptionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmagoServer is the server API for Pharmago service.
// All implementations must embed UnimplementedPharmagoServer
// for forward compatibility
type PharmagoServer interface {
	// TODO: ==================== Authentication ==========================
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponse, error)
	SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error)
	VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error)
	CheckPhone(context.Context, *CheckPhoneRequest) (*CheckPhoneResponse, error)
	// TODO: ==================== Account ==========================
	AccountDetail(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error)
	AccountInactive(context.Context, *AccountInactiveRequest) (*AccountInactiveResponse, error)
	AccountList(context.Context, *AccountListRequest) (*AccountListResponse, error)
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeResponse, error)
	UpdateEmployee(context.Context, *EmployeeUpdateRequest) (*EmployeeUpdateResponse, error)
	DetailEmployee(context.Context, *EmployeeDetailRequest) (*EmployeeDetailResponse, error)
	AssignRoleEmployee(context.Context, *AssignRoleEmployeeRequest) (*AssignRoleEmployeeResponse, error)
	DeleteEmployee(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error)
	// TODO ================== APP ===================
	AppList(context.Context, *AppListRequest) (*AppListResponse, error)
	// TODO ================== ROLE ===================
	RoleCreate(context.Context, *RoleCreateRequest) (*RoleCreateResponse, error)
	RoleList(context.Context, *RoleListRequest) (*RoleListResponse, error)
	RoleDetail(context.Context, *RoleDetailRequest) (*RoleDetailResponse, error)
	RoleUpdate(context.Context, *RoleUpdateRequest) (*RoleUpdateResponse, error)
	RoleDelete(context.Context, *RoleDeleteRequest) (*RoleDeleteResponse, error)
	// TODO: ==================== REPORT ==========================
	HomeData(context.Context, *HomeDataRequest) (*HomeDataResponse, error)
	ReportRevenue(context.Context, *ReportRevenueRequest) (*ReportRevenueResponse, error)
	ReportOrder(context.Context, *ReportOrderRequest) (*ReportOrderResponse, error)
	ReportCustomer(context.Context, *ReportCustomerRequest) (*ReportCustomerResponse, error)
	ReportCustomerRevenue(context.Context, *ReportCustomerRevenueRequest) (*ReportCustomerRevenueResponse, error)
	// TODO: ==================== COMPANY ==========================
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error)
	UpdateCompany(context.Context, *UpdateCompanyDataRequest) (*UpdateCompanyResponse, error)
	DetailCompany(context.Context, *DetailCompanyDataRequest) (*DetailCompanyResponse, error)
	ListCompanies(context.Context, *GetCompaniesRequest) (*GetCompaniesResponse, error)
	AssignEmployee(context.Context, *AssignCompanyReq) (*AssignCompanyRes, error)
	// TODO: ==================== ADDRESS ==========================
	ListProvinces(context.Context, *ProvincesRequest) (*ProvincesResponse, error)
	ListDistricts(context.Context, *DistrictsRequest) (*DistrictsResponse, error)
	ListWards(context.Context, *WardsRequest) (*WardsResponse, error)
	// ==================== PRODUCT ========================
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	UpdateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error)
	DetailProduct(context.Context, *DetailProductRequest) (*DetailProductResponse, error)
	// ==================== PROMOTIONS ========================
	PromotionByProduct(context.Context, *PromotionByProductRequest) (*PromotionByProductResponse, error)
	PromotionCheck(context.Context, *PromotionCheckRequest) (*PromotionCheckResponse, error)
	PromotionCreate(context.Context, *PromotionCreateRequest) (*PromotionCreateResponse, error)
	// TODO -------- VARIANT --------
	ListVariant(context.Context, *ListVariantRequest) (*ListVariantResponse, error)
	VariantsCustomerBuy(context.Context, *VariantsCustomerBuyRequest) (*VariantsCustomerBuyResponse, error)
	ScanVariant(Pharmago_ScanVariantServer) error
	// TODO -------- PRICE_LIST --------
	GetPriceList(context.Context, *PriceListRequest) (*PriceListResponse, error)
	DetailPriceList(context.Context, *DetailPriceListRequest) (*DetailPriceListResponse, error)
	UpdatePriceList(context.Context, *UpdatePriceListRequest) (*UpdatePriceListResponse, error)
	// TODO ================== PRODUCT MASTER DATA ===================
	ClassifyList(context.Context, *ClassifyListRequest) (*ClassifyListResponse, error)
	ProductionStandardList(context.Context, *ProductionStandardListRequest) (*ProductionStandardListResponse, error)
	ProductionStandardCreate(context.Context, *ProductionStandardCreateRequest) (*ProductionStandardCreateResponse, error)
	ProductionStandardDetail(context.Context, *ProductionStandardDetailRequest) (*ProductionStandardDetailResponse, error)
	ProductionStandardUpdate(context.Context, *ProductionStandardUpdateRequest) (*ProductionStandardUpdateResponse, error)
	ProductionStandardDelete(context.Context, *ProductionStandardDeleteRequest) (*ProductionStandardDeleteResponse, error)
	PreparationTypeList(context.Context, *PreparationTypeListRequest) (*PreparationTypeListResponse, error)
	PreparationTypeCreate(context.Context, *PreparationTypeCreateRequest) (*PreparationTypeCreateResponse, error)
	PreparationTypeDetail(context.Context, *PreparationTypeDetailRequest) (*PreparationTypeDetailResponse, error)
	PreparationTypeUpdate(context.Context, *PreparationTypeUpdateRequest) (*PreparationTypeUpdateResponse, error)
	PreparationTypeDelete(context.Context, *PreparationTypeDeleteRequest) (*PreparationTypeDeleteResponse, error)
	// ================== Company Pharma ===================
	CompanyPharmaList(context.Context, *CompanyPharmaListRequest) (*CompanyPharmaListResponse, error)
	CompanyPharmaCreate(context.Context, *CompanyPharmaCreateRequest) (*CompanyPharmaCreateResponse, error)
	CompanyPharmaDetail(context.Context, *CompanyPharmaDetailRequest) (*CompanyPharmaDetailResponse, error)
	CompanyPharmaUpdate(context.Context, *CompanyPharmaUpdateRequest) (*CompanyPharmaUpdateResponse, error)
	CompanyPharmaDelete(context.Context, *CompanyPharmaDeleteRequest) (*CompanyPharmaDeleteResponse, error)
	// TODO: ================== BRAND ===================
	BrandList(context.Context, *BrandListRequest) (*BrandListResponse, error)
	BrandCreate(context.Context, *BrandCreateRequest) (*BrandCreateResponse, error)
	BrandUpdate(context.Context, *BrandUpdateRequest) (*BrandUpdateResponse, error)
	BrandDetail(context.Context, *BrandDetailRequest) (*BrandDetailResponse, error)
	BrandDelete(context.Context, *BrandDeleteRequest) (*BrandDeleteResponse, error)
	// TODO: ================== CATEGORY ===================
	CategoryList(context.Context, *CategoryListRequest) (*CategoryListResponse, error)
	CategoryCreate(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error)
	CategoryUpdate(context.Context, *CategoryUpdateRequest) (*CategoryUpdateResponse, error)
	CategoryDetail(context.Context, *CategoryDetailRequest) (*CategoryDetailResponse, error)
	CategoryDelete(context.Context, *CategoryDeleteRequest) (*CategoryDeleteResponse, error)
	// ================== PRODUCT_TYPE ===================
	ProductTypeList(context.Context, *ProductTypeListRequest) (*ProductTypeListResponse, error)
	// TODO: ================== SUPPLIER ===================
	SupplierCreate(context.Context, *SupplierCreateRequest) (*SupplierCreateResponse, error)
	SupplierList(context.Context, *SupplierListRequest) (*SupplierListResponse, error)
	SupplierDetail(context.Context, *SupplierDetailRequest) (*SupplierDetailResponse, error)
	SupplierUpdate(context.Context, *SupplierUpdateRequest) (*SupplierUpdateResponse, error)
	SupplierDelete(context.Context, *SupplierDeleteRequest) (*SupplierDeleteResponse, error)
	// TODO ================== WAREHOUSE ===================
	WarehouseCreate(context.Context, *WarehouseCreateRequest) (*WarehouseCreateResponse, error)
	WarehouseList(context.Context, *WarehouseListRequest) (*WarehouseListResponse, error)
	WarehouseDetail(context.Context, *WarehouseDetailRequest) (*WarehouseDetailResponse, error)
	WarehouseUpdate(context.Context, *WarehouseUpdateRequest) (*WarehouseUpdateResponse, error)
	WarehouseDelete(context.Context, *WarehouseDeleteRequest) (*WarehouseDeleteResponse, error)
	TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error)
	TicketList(context.Context, *TicketListRequest) (*TicketListResponse, error)
	TicketDetail(context.Context, *TicketDetailRequest) (*TicketDetailResponse, error)
	TicketUpdateStatus(context.Context, *TicketUpdateStatusRequest) (*TicketUpdateStatusResponse, error)
	ConsignmentList(context.Context, *ConsignmentListRequest) (*ConsignmentListResponse, error)
	// ================== ORDER ===================
	OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error)
	OrderList(context.Context, *OrderListRequest) (*OrderListResponse, error)
	OrderListByMedicalBill(context.Context, *OrdersByMedicalBillRequest) (*OrderListResponse, error)
	OrderDetail(context.Context, *OrderDetailRequest) (*OrderDetailResponse, error)
	OrderUpdateStatus(context.Context, *OrderUpdateStatusRequest) (*OrderUpdateStatusResponse, error)
	OrderScan(context.Context, *OrderScanRequest) (*OrderScanResponse, error)
	CreatePaymentItemOrder(context.Context, *PaymentItemOrderRequest) (*PaymentItemOrderResponse, error)
	// ================== CUSTOMER ===================
	CustomerList(context.Context, *CustomerListRequest) (*CustomerListResponse, error)
	CustomerCreate(context.Context, *CustomerCreateRequest) (*CustomerCreateResponse, error)
	CustomerDetail(context.Context, *CustomerDetailRequest) (*CustomerDetailResponse, error)
	CustomerUpdate(context.Context, *CustomerUpdateRequest) (*CustomerUpdateResponse, error)
	CustomerGroupList(context.Context, *CustomerGroupListRequest) (*CustomerGroupListResponse, error)
	CustomerGroupCreate(context.Context, *CustomerGroupCreateRequest) (*CustomerGroupCreateResponse, error)
	CustomerGroupDetail(context.Context, *CustomerGroupDetailRequest) (*CustomerGroupDetailResponse, error)
	CustomerGroupUpdate(context.Context, *CustomerGroupUpdateRequest) (*CustomerGroupUpdateResponse, error)
	CustomerGroupDelete(context.Context, *CustomerGroupDeleteRequest) (*CustomerGroupDeleteResponse, error)
	MedicalRecordCreate(context.Context, *MedicalRecordCreateRequest) (*MedicalRecordCreateResponse, error)
	MedicalRecordCreateStream(*MedicalRecordCreateRequest, Pharmago_MedicalRecordCreateStreamServer) error
	MedicalRecordList(context.Context, *MedicalRecordListRequest) (*MedicalRecordListResponse, error)
	MedicalRecordDelete(context.Context, *MedicalRecordDeleteRequest) (*MedicalRecordDeleteResponse, error)
	// ================== IMPORT ===================
	ImportCompany(context.Context, *ImportCompanyRequest) (*ImportCompanyResponse, error)
	ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error)
	ImportProductMasterData(context.Context, *ImportProductMasterDataRequest) (*ImportProductMasterDataResponse, error)
	// ================== DEBT NOTE ===================
	ListDebtNote(context.Context, *ListDebtNoteRequest) (*ListDebtNoteResponse, error)
	CreateDebtNote(context.Context, *CreateDebtNoteRequest) (*CreateDebtNoteResponse, error)
	DetailDebtNote(context.Context, *DetailDebtNoteRequest) (*DetailDebtNoteResponse, error)
	ReportDebtNote(context.Context, *ReportDebtNoteRequest) (*ReportDebtNoteResponse, error)
	CreateDebtRepayment(context.Context, *CreateDebtRepaymentRequest) (*CreateDebtRepaymentResponse, error)
	// ================== SERVICE ===================
	ServiceList(context.Context, *ServiceListRequest) (*ServiceListResponse, error)
	ServicesByCustomer(context.Context, *ServicesByCustomerRequest) (*ServicesByCustomerResponse, error)
	ServiceCreate(context.Context, *ServiceCreateRequest) (*ServiceCreateResponse, error)
	ServiceDetail(context.Context, *ServiceDetailRequest) (*ServiceDetailResponse, error)
	ServiceUpdate(context.Context, *ServiceUpdateRequest) (*ServiceUpdateResponse, error)
	ServiceDelete(context.Context, *ServiceDeleteRequest) (*ServiceDeleteResponse, error)
	// ================== CONVERSATION ===================
	ConversationList(context.Context, *ListConversationRequest) (*ListConversationResponse, error)
	MessageList(context.Context, *ListMessageRequest) (*ListMessageResponse, error)
	// ================== MEDICAL RECORD ===================
	ListMedicalRecord(context.Context, *ListMedicalRecordRequest) (*ListMedicalRecordResponse, error)
	CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*CreateMedicalRecordResponse, error)
	DetailMedicalRecord(context.Context, *DetailMedicalRecordRequest) (*DetailMedicalRecordResponse, error)
	// ================== NOTIFICATION ===================
	ListNotification(context.Context, *ListNotificationRequest) (*ListNotificationResponse, error)
	DetailNotification(context.Context, *DetailNotificationRequest) (*DetailNotificationResponse, error)
	SeenAllNoti(context.Context, *SeenAllNotiRequest) (*SeenAllNotiResponse, error)
	// ================== AppointmentSchedule ===================
	ScheduleCreate(context.Context, *AppointmentSchedule) (*AppointmentScheduleResponse, error)
	ScheduleList(context.Context, *AppointmentScheduleListRequest) (*AppointmentScheduleListResponse, error)
	ScheduleDetail(context.Context, *AppointmentSchedule) (*AppointmentScheduleResponse, error)
	ScheduleUpdate(context.Context, *AppointmentScheduleUpdateRequest) (*AppointmentScheduleUpdateResponse, error)
	// ================== MedicalBill ===================
	MedicalBillCreate(context.Context, *MedicalBill) (*MedicalBillResponse, error)
	MedicalBillList(context.Context, *MedicalBillListRequest) (*MedicalBillListResponse, error)
	MedicalBillDetail(context.Context, *MedicalBill) (*MedicalBillResponse, error)
	MedicalBillUpdate(context.Context, *MedicalBillUpdateRequest) (*MedicalBillUpdateResponse, error)
	// ================== PRESCRIPTION ===================
	PrescriptionCreate(context.Context, *Prescription) (*PrescriptionResponse, error)
	PrescriptionUpdate(context.Context, *PrescriptionUpdateRequest) (*PrescriptionUpdateResponse, error)
	PrescriptionDetail(context.Context, *Prescription) (*PrescriptionResponse, error)
	PrescriptionList(context.Context, *PrescriptionListRequest) (*PrescriptionListResponse, error)
	mustEmbedUnimplementedPharmagoServer()
}

// UnimplementedPharmagoServer must be embedded to have forward compatible implementations.
type UnimplementedPharmagoServer struct {
}

func (UnimplementedPharmagoServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPharmagoServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedPharmagoServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedPharmagoServer) VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedPharmagoServer) SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedPharmagoServer) VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedPharmagoServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedPharmagoServer) CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedPharmagoServer) CheckPhone(context.Context, *CheckPhoneRequest) (*CheckPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhone not implemented")
}
func (UnimplementedPharmagoServer) AccountDetail(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDetail not implemented")
}
func (UnimplementedPharmagoServer) AccountInactive(context.Context, *AccountInactiveRequest) (*AccountInactiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInactive not implemented")
}
func (UnimplementedPharmagoServer) AccountList(context.Context, *AccountListRequest) (*AccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountList not implemented")
}
func (UnimplementedPharmagoServer) CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedPharmagoServer) UpdateEmployee(context.Context, *EmployeeUpdateRequest) (*EmployeeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedPharmagoServer) DetailEmployee(context.Context, *EmployeeDetailRequest) (*EmployeeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailEmployee not implemented")
}
func (UnimplementedPharmagoServer) AssignRoleEmployee(context.Context, *AssignRoleEmployeeRequest) (*AssignRoleEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleEmployee not implemented")
}
func (UnimplementedPharmagoServer) DeleteEmployee(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedPharmagoServer) AppList(context.Context, *AppListRequest) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedPharmagoServer) RoleCreate(context.Context, *RoleCreateRequest) (*RoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCreate not implemented")
}
func (UnimplementedPharmagoServer) RoleList(context.Context, *RoleListRequest) (*RoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedPharmagoServer) RoleDetail(context.Context, *RoleDetailRequest) (*RoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDetail not implemented")
}
func (UnimplementedPharmagoServer) RoleUpdate(context.Context, *RoleUpdateRequest) (*RoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedPharmagoServer) RoleDelete(context.Context, *RoleDeleteRequest) (*RoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedPharmagoServer) HomeData(context.Context, *HomeDataRequest) (*HomeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeData not implemented")
}
func (UnimplementedPharmagoServer) ReportRevenue(context.Context, *ReportRevenueRequest) (*ReportRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRevenue not implemented")
}
func (UnimplementedPharmagoServer) ReportOrder(context.Context, *ReportOrderRequest) (*ReportOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOrder not implemented")
}
func (UnimplementedPharmagoServer) ReportCustomer(context.Context, *ReportCustomerRequest) (*ReportCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCustomer not implemented")
}
func (UnimplementedPharmagoServer) ReportCustomerRevenue(context.Context, *ReportCustomerRevenueRequest) (*ReportCustomerRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCustomerRevenue not implemented")
}
func (UnimplementedPharmagoServer) CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedPharmagoServer) UpdateCompany(context.Context, *UpdateCompanyDataRequest) (*UpdateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedPharmagoServer) DetailCompany(context.Context, *DetailCompanyDataRequest) (*DetailCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailCompany not implemented")
}
func (UnimplementedPharmagoServer) ListCompanies(context.Context, *GetCompaniesRequest) (*GetCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (UnimplementedPharmagoServer) AssignEmployee(context.Context, *AssignCompanyReq) (*AssignCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignEmployee not implemented")
}
func (UnimplementedPharmagoServer) ListProvinces(context.Context, *ProvincesRequest) (*ProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvinces not implemented")
}
func (UnimplementedPharmagoServer) ListDistricts(context.Context, *DistrictsRequest) (*DistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (UnimplementedPharmagoServer) ListWards(context.Context, *WardsRequest) (*WardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWards not implemented")
}
func (UnimplementedPharmagoServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedPharmagoServer) UpdateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedPharmagoServer) ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedPharmagoServer) DetailProduct(context.Context, *DetailProductRequest) (*DetailProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailProduct not implemented")
}
func (UnimplementedPharmagoServer) PromotionByProduct(context.Context, *PromotionByProductRequest) (*PromotionByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionByProduct not implemented")
}
func (UnimplementedPharmagoServer) PromotionCheck(context.Context, *PromotionCheckRequest) (*PromotionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionCheck not implemented")
}
func (UnimplementedPharmagoServer) PromotionCreate(context.Context, *PromotionCreateRequest) (*PromotionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionCreate not implemented")
}
func (UnimplementedPharmagoServer) ListVariant(context.Context, *ListVariantRequest) (*ListVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariant not implemented")
}
func (UnimplementedPharmagoServer) VariantsCustomerBuy(context.Context, *VariantsCustomerBuyRequest) (*VariantsCustomerBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VariantsCustomerBuy not implemented")
}
func (UnimplementedPharmagoServer) ScanVariant(Pharmago_ScanVariantServer) error {
	return status.Errorf(codes.Unimplemented, "method ScanVariant not implemented")
}
func (UnimplementedPharmagoServer) GetPriceList(context.Context, *PriceListRequest) (*PriceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceList not implemented")
}
func (UnimplementedPharmagoServer) DetailPriceList(context.Context, *DetailPriceListRequest) (*DetailPriceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPriceList not implemented")
}
func (UnimplementedPharmagoServer) UpdatePriceList(context.Context, *UpdatePriceListRequest) (*UpdatePriceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriceList not implemented")
}
func (UnimplementedPharmagoServer) ClassifyList(context.Context, *ClassifyListRequest) (*ClassifyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyList not implemented")
}
func (UnimplementedPharmagoServer) ProductionStandardList(context.Context, *ProductionStandardListRequest) (*ProductionStandardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionStandardList not implemented")
}
func (UnimplementedPharmagoServer) ProductionStandardCreate(context.Context, *ProductionStandardCreateRequest) (*ProductionStandardCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionStandardCreate not implemented")
}
func (UnimplementedPharmagoServer) ProductionStandardDetail(context.Context, *ProductionStandardDetailRequest) (*ProductionStandardDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionStandardDetail not implemented")
}
func (UnimplementedPharmagoServer) ProductionStandardUpdate(context.Context, *ProductionStandardUpdateRequest) (*ProductionStandardUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionStandardUpdate not implemented")
}
func (UnimplementedPharmagoServer) ProductionStandardDelete(context.Context, *ProductionStandardDeleteRequest) (*ProductionStandardDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionStandardDelete not implemented")
}
func (UnimplementedPharmagoServer) PreparationTypeList(context.Context, *PreparationTypeListRequest) (*PreparationTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparationTypeList not implemented")
}
func (UnimplementedPharmagoServer) PreparationTypeCreate(context.Context, *PreparationTypeCreateRequest) (*PreparationTypeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparationTypeCreate not implemented")
}
func (UnimplementedPharmagoServer) PreparationTypeDetail(context.Context, *PreparationTypeDetailRequest) (*PreparationTypeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparationTypeDetail not implemented")
}
func (UnimplementedPharmagoServer) PreparationTypeUpdate(context.Context, *PreparationTypeUpdateRequest) (*PreparationTypeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparationTypeUpdate not implemented")
}
func (UnimplementedPharmagoServer) PreparationTypeDelete(context.Context, *PreparationTypeDeleteRequest) (*PreparationTypeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparationTypeDelete not implemented")
}
func (UnimplementedPharmagoServer) CompanyPharmaList(context.Context, *CompanyPharmaListRequest) (*CompanyPharmaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPharmaList not implemented")
}
func (UnimplementedPharmagoServer) CompanyPharmaCreate(context.Context, *CompanyPharmaCreateRequest) (*CompanyPharmaCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPharmaCreate not implemented")
}
func (UnimplementedPharmagoServer) CompanyPharmaDetail(context.Context, *CompanyPharmaDetailRequest) (*CompanyPharmaDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPharmaDetail not implemented")
}
func (UnimplementedPharmagoServer) CompanyPharmaUpdate(context.Context, *CompanyPharmaUpdateRequest) (*CompanyPharmaUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPharmaUpdate not implemented")
}
func (UnimplementedPharmagoServer) CompanyPharmaDelete(context.Context, *CompanyPharmaDeleteRequest) (*CompanyPharmaDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPharmaDelete not implemented")
}
func (UnimplementedPharmagoServer) BrandList(context.Context, *BrandListRequest) (*BrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedPharmagoServer) BrandCreate(context.Context, *BrandCreateRequest) (*BrandCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandCreate not implemented")
}
func (UnimplementedPharmagoServer) BrandUpdate(context.Context, *BrandUpdateRequest) (*BrandUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandUpdate not implemented")
}
func (UnimplementedPharmagoServer) BrandDetail(context.Context, *BrandDetailRequest) (*BrandDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDetail not implemented")
}
func (UnimplementedPharmagoServer) BrandDelete(context.Context, *BrandDeleteRequest) (*BrandDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDelete not implemented")
}
func (UnimplementedPharmagoServer) CategoryList(context.Context, *CategoryListRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryList not implemented")
}
func (UnimplementedPharmagoServer) CategoryCreate(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryCreate not implemented")
}
func (UnimplementedPharmagoServer) CategoryUpdate(context.Context, *CategoryUpdateRequest) (*CategoryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryUpdate not implemented")
}
func (UnimplementedPharmagoServer) CategoryDetail(context.Context, *CategoryDetailRequest) (*CategoryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDetail not implemented")
}
func (UnimplementedPharmagoServer) CategoryDelete(context.Context, *CategoryDeleteRequest) (*CategoryDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryDelete not implemented")
}
func (UnimplementedPharmagoServer) ProductTypeList(context.Context, *ProductTypeListRequest) (*ProductTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductTypeList not implemented")
}
func (UnimplementedPharmagoServer) SupplierCreate(context.Context, *SupplierCreateRequest) (*SupplierCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierCreate not implemented")
}
func (UnimplementedPharmagoServer) SupplierList(context.Context, *SupplierListRequest) (*SupplierListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierList not implemented")
}
func (UnimplementedPharmagoServer) SupplierDetail(context.Context, *SupplierDetailRequest) (*SupplierDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierDetail not implemented")
}
func (UnimplementedPharmagoServer) SupplierUpdate(context.Context, *SupplierUpdateRequest) (*SupplierUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierUpdate not implemented")
}
func (UnimplementedPharmagoServer) SupplierDelete(context.Context, *SupplierDeleteRequest) (*SupplierDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierDelete not implemented")
}
func (UnimplementedPharmagoServer) WarehouseCreate(context.Context, *WarehouseCreateRequest) (*WarehouseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseCreate not implemented")
}
func (UnimplementedPharmagoServer) WarehouseList(context.Context, *WarehouseListRequest) (*WarehouseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseList not implemented")
}
func (UnimplementedPharmagoServer) WarehouseDetail(context.Context, *WarehouseDetailRequest) (*WarehouseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseDetail not implemented")
}
func (UnimplementedPharmagoServer) WarehouseUpdate(context.Context, *WarehouseUpdateRequest) (*WarehouseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseUpdate not implemented")
}
func (UnimplementedPharmagoServer) WarehouseDelete(context.Context, *WarehouseDeleteRequest) (*WarehouseDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseDelete not implemented")
}
func (UnimplementedPharmagoServer) TicketCreate(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketCreate not implemented")
}
func (UnimplementedPharmagoServer) TicketList(context.Context, *TicketListRequest) (*TicketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketList not implemented")
}
func (UnimplementedPharmagoServer) TicketDetail(context.Context, *TicketDetailRequest) (*TicketDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketDetail not implemented")
}
func (UnimplementedPharmagoServer) TicketUpdateStatus(context.Context, *TicketUpdateStatusRequest) (*TicketUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketUpdateStatus not implemented")
}
func (UnimplementedPharmagoServer) ConsignmentList(context.Context, *ConsignmentListRequest) (*ConsignmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsignmentList not implemented")
}
func (UnimplementedPharmagoServer) OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreate not implemented")
}
func (UnimplementedPharmagoServer) OrderList(context.Context, *OrderListRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedPharmagoServer) OrderListByMedicalBill(context.Context, *OrdersByMedicalBillRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderListByMedicalBill not implemented")
}
func (UnimplementedPharmagoServer) OrderDetail(context.Context, *OrderDetailRequest) (*OrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDetail not implemented")
}
func (UnimplementedPharmagoServer) OrderUpdateStatus(context.Context, *OrderUpdateStatusRequest) (*OrderUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdateStatus not implemented")
}
func (UnimplementedPharmagoServer) OrderScan(context.Context, *OrderScanRequest) (*OrderScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderScan not implemented")
}
func (UnimplementedPharmagoServer) CreatePaymentItemOrder(context.Context, *PaymentItemOrderRequest) (*PaymentItemOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentItemOrder not implemented")
}
func (UnimplementedPharmagoServer) CustomerList(context.Context, *CustomerListRequest) (*CustomerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerList not implemented")
}
func (UnimplementedPharmagoServer) CustomerCreate(context.Context, *CustomerCreateRequest) (*CustomerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerCreate not implemented")
}
func (UnimplementedPharmagoServer) CustomerDetail(context.Context, *CustomerDetailRequest) (*CustomerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetail not implemented")
}
func (UnimplementedPharmagoServer) CustomerUpdate(context.Context, *CustomerUpdateRequest) (*CustomerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerUpdate not implemented")
}
func (UnimplementedPharmagoServer) CustomerGroupList(context.Context, *CustomerGroupListRequest) (*CustomerGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGroupList not implemented")
}
func (UnimplementedPharmagoServer) CustomerGroupCreate(context.Context, *CustomerGroupCreateRequest) (*CustomerGroupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGroupCreate not implemented")
}
func (UnimplementedPharmagoServer) CustomerGroupDetail(context.Context, *CustomerGroupDetailRequest) (*CustomerGroupDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGroupDetail not implemented")
}
func (UnimplementedPharmagoServer) CustomerGroupUpdate(context.Context, *CustomerGroupUpdateRequest) (*CustomerGroupUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGroupUpdate not implemented")
}
func (UnimplementedPharmagoServer) CustomerGroupDelete(context.Context, *CustomerGroupDeleteRequest) (*CustomerGroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGroupDelete not implemented")
}
func (UnimplementedPharmagoServer) MedicalRecordCreate(context.Context, *MedicalRecordCreateRequest) (*MedicalRecordCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalRecordCreate not implemented")
}
func (UnimplementedPharmagoServer) MedicalRecordCreateStream(*MedicalRecordCreateRequest, Pharmago_MedicalRecordCreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MedicalRecordCreateStream not implemented")
}
func (UnimplementedPharmagoServer) MedicalRecordList(context.Context, *MedicalRecordListRequest) (*MedicalRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalRecordList not implemented")
}
func (UnimplementedPharmagoServer) MedicalRecordDelete(context.Context, *MedicalRecordDeleteRequest) (*MedicalRecordDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalRecordDelete not implemented")
}
func (UnimplementedPharmagoServer) ImportCompany(context.Context, *ImportCompanyRequest) (*ImportCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCompany not implemented")
}
func (UnimplementedPharmagoServer) ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProduct not implemented")
}
func (UnimplementedPharmagoServer) ImportProductMasterData(context.Context, *ImportProductMasterDataRequest) (*ImportProductMasterDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductMasterData not implemented")
}
func (UnimplementedPharmagoServer) ListDebtNote(context.Context, *ListDebtNoteRequest) (*ListDebtNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDebtNote not implemented")
}
func (UnimplementedPharmagoServer) CreateDebtNote(context.Context, *CreateDebtNoteRequest) (*CreateDebtNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebtNote not implemented")
}
func (UnimplementedPharmagoServer) DetailDebtNote(context.Context, *DetailDebtNoteRequest) (*DetailDebtNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailDebtNote not implemented")
}
func (UnimplementedPharmagoServer) ReportDebtNote(context.Context, *ReportDebtNoteRequest) (*ReportDebtNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDebtNote not implemented")
}
func (UnimplementedPharmagoServer) CreateDebtRepayment(context.Context, *CreateDebtRepaymentRequest) (*CreateDebtRepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebtRepayment not implemented")
}
func (UnimplementedPharmagoServer) ServiceList(context.Context, *ServiceListRequest) (*ServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceList not implemented")
}
func (UnimplementedPharmagoServer) ServicesByCustomer(context.Context, *ServicesByCustomerRequest) (*ServicesByCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServicesByCustomer not implemented")
}
func (UnimplementedPharmagoServer) ServiceCreate(context.Context, *ServiceCreateRequest) (*ServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCreate not implemented")
}
func (UnimplementedPharmagoServer) ServiceDetail(context.Context, *ServiceDetailRequest) (*ServiceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDetail not implemented")
}
func (UnimplementedPharmagoServer) ServiceUpdate(context.Context, *ServiceUpdateRequest) (*ServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUpdate not implemented")
}
func (UnimplementedPharmagoServer) ServiceDelete(context.Context, *ServiceDeleteRequest) (*ServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelete not implemented")
}
func (UnimplementedPharmagoServer) ConversationList(context.Context, *ListConversationRequest) (*ListConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationList not implemented")
}
func (UnimplementedPharmagoServer) MessageList(context.Context, *ListMessageRequest) (*ListMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageList not implemented")
}
func (UnimplementedPharmagoServer) ListMedicalRecord(context.Context, *ListMedicalRecordRequest) (*ListMedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecord not implemented")
}
func (UnimplementedPharmagoServer) CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*CreateMedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicalRecord not implemented")
}
func (UnimplementedPharmagoServer) DetailMedicalRecord(context.Context, *DetailMedicalRecordRequest) (*DetailMedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailMedicalRecord not implemented")
}
func (UnimplementedPharmagoServer) ListNotification(context.Context, *ListNotificationRequest) (*ListNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotification not implemented")
}
func (UnimplementedPharmagoServer) DetailNotification(context.Context, *DetailNotificationRequest) (*DetailNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailNotification not implemented")
}
func (UnimplementedPharmagoServer) SeenAllNoti(context.Context, *SeenAllNotiRequest) (*SeenAllNotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeenAllNoti not implemented")
}
func (UnimplementedPharmagoServer) ScheduleCreate(context.Context, *AppointmentSchedule) (*AppointmentScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleCreate not implemented")
}
func (UnimplementedPharmagoServer) ScheduleList(context.Context, *AppointmentScheduleListRequest) (*AppointmentScheduleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleList not implemented")
}
func (UnimplementedPharmagoServer) ScheduleDetail(context.Context, *AppointmentSchedule) (*AppointmentScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDetail not implemented")
}
func (UnimplementedPharmagoServer) ScheduleUpdate(context.Context, *AppointmentScheduleUpdateRequest) (*AppointmentScheduleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleUpdate not implemented")
}
func (UnimplementedPharmagoServer) MedicalBillCreate(context.Context, *MedicalBill) (*MedicalBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalBillCreate not implemented")
}
func (UnimplementedPharmagoServer) MedicalBillList(context.Context, *MedicalBillListRequest) (*MedicalBillListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalBillList not implemented")
}
func (UnimplementedPharmagoServer) MedicalBillDetail(context.Context, *MedicalBill) (*MedicalBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalBillDetail not implemented")
}
func (UnimplementedPharmagoServer) MedicalBillUpdate(context.Context, *MedicalBillUpdateRequest) (*MedicalBillUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicalBillUpdate not implemented")
}
func (UnimplementedPharmagoServer) PrescriptionCreate(context.Context, *Prescription) (*PrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrescriptionCreate not implemented")
}
func (UnimplementedPharmagoServer) PrescriptionUpdate(context.Context, *PrescriptionUpdateRequest) (*PrescriptionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrescriptionUpdate not implemented")
}
func (UnimplementedPharmagoServer) PrescriptionDetail(context.Context, *Prescription) (*PrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrescriptionDetail not implemented")
}
func (UnimplementedPharmagoServer) PrescriptionList(context.Context, *PrescriptionListRequest) (*PrescriptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrescriptionList not implemented")
}
func (UnimplementedPharmagoServer) mustEmbedUnimplementedPharmagoServer() {}

// UnsafePharmagoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmagoServer will
// result in compilation errors.
type UnsafePharmagoServer interface {
	mustEmbedUnimplementedPharmagoServer()
}

func RegisterPharmagoServer(s grpc.ServiceRegistrar, srv PharmagoServer) {
	s.RegisterService(&Pharmago_ServiceDesc, srv)
}

func _Pharmago_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_VerifyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).VerifyAccount(ctx, req.(*VerifyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CheckEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CheckEmail(ctx, req.(*CheckEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CheckPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CheckPhone(ctx, req.(*CheckPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AccountDetail(ctx, req.(*AccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AccountInactive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInactiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AccountInactive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AccountInactive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AccountInactive(ctx, req.(*AccountInactiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AccountList(ctx, req.(*AccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateEmployee(ctx, req.(*CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_UpdateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).UpdateEmployee(ctx, req.(*EmployeeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailEmployee(ctx, req.(*EmployeeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AssignRoleEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AssignRoleEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AssignRoleEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AssignRoleEmployee(ctx, req.(*AssignRoleEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DeleteEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DeleteEmployee(ctx, req.(*AccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AppList(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_RoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).RoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_RoleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).RoleCreate(ctx, req.(*RoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).RoleList(ctx, req.(*RoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_RoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).RoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_RoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).RoleDetail(ctx, req.(*RoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_RoleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).RoleUpdate(ctx, req.(*RoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_RoleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).RoleDelete(ctx, req.(*RoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_HomeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).HomeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_HomeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).HomeData(ctx, req.(*HomeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ReportRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ReportRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ReportRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ReportRevenue(ctx, req.(*ReportRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ReportOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ReportOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ReportOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ReportOrder(ctx, req.(*ReportOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ReportCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ReportCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ReportCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ReportCustomer(ctx, req.(*ReportCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ReportCustomerRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCustomerRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ReportCustomerRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ReportCustomerRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ReportCustomerRevenue(ctx, req.(*ReportCustomerRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_UpdateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).UpdateCompany(ctx, req.(*UpdateCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailCompany(ctx, req.(*DetailCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListCompanies(ctx, req.(*GetCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_AssignEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).AssignEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_AssignEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).AssignEmployee(ctx, req.(*AssignCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvincesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListProvinces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListProvinces(ctx, req.(*ProvincesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListDistricts(ctx, req.(*DistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListWards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListWards(ctx, req.(*WardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).UpdateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListProduct(ctx, req.(*ListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailProduct(ctx, req.(*DetailProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PromotionByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PromotionByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PromotionByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PromotionByProduct(ctx, req.(*PromotionByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PromotionCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PromotionCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PromotionCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PromotionCheck(ctx, req.(*PromotionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PromotionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PromotionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PromotionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PromotionCreate(ctx, req.(*PromotionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListVariant(ctx, req.(*ListVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_VariantsCustomerBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariantsCustomerBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).VariantsCustomerBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_VariantsCustomerBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).VariantsCustomerBuy(ctx, req.(*VariantsCustomerBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ScanVariant_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PharmagoServer).ScanVariant(&pharmagoScanVariantServer{stream})
}

type Pharmago_ScanVariantServer interface {
	Send(*VariantScanResponse) error
	Recv() (*VariantScanRequest, error)
	grpc.ServerStream
}

type pharmagoScanVariantServer struct {
	grpc.ServerStream
}

func (x *pharmagoScanVariantServer) Send(m *VariantScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pharmagoScanVariantServer) Recv() (*VariantScanRequest, error) {
	m := new(VariantScanRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pharmago_GetPriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).GetPriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_GetPriceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).GetPriceList(ctx, req.(*PriceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailPriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPriceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailPriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailPriceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailPriceList(ctx, req.(*DetailPriceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_UpdatePriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).UpdatePriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_UpdatePriceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).UpdatePriceList(ctx, req.(*UpdatePriceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ClassifyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ClassifyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ClassifyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ClassifyList(ctx, req.(*ClassifyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductionStandardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStandardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductionStandardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductionStandardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductionStandardList(ctx, req.(*ProductionStandardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductionStandardCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStandardCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductionStandardCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductionStandardCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductionStandardCreate(ctx, req.(*ProductionStandardCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductionStandardDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStandardDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductionStandardDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductionStandardDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductionStandardDetail(ctx, req.(*ProductionStandardDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductionStandardUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStandardUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductionStandardUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductionStandardUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductionStandardUpdate(ctx, req.(*ProductionStandardUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductionStandardDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStandardDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductionStandardDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductionStandardDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductionStandardDelete(ctx, req.(*ProductionStandardDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PreparationTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparationTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PreparationTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PreparationTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PreparationTypeList(ctx, req.(*PreparationTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PreparationTypeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparationTypeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PreparationTypeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PreparationTypeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PreparationTypeCreate(ctx, req.(*PreparationTypeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PreparationTypeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparationTypeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PreparationTypeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PreparationTypeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PreparationTypeDetail(ctx, req.(*PreparationTypeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PreparationTypeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparationTypeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PreparationTypeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PreparationTypeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PreparationTypeUpdate(ctx, req.(*PreparationTypeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PreparationTypeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparationTypeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PreparationTypeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PreparationTypeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PreparationTypeDelete(ctx, req.(*PreparationTypeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CompanyPharmaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPharmaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CompanyPharmaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CompanyPharmaList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CompanyPharmaList(ctx, req.(*CompanyPharmaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CompanyPharmaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPharmaCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CompanyPharmaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CompanyPharmaCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CompanyPharmaCreate(ctx, req.(*CompanyPharmaCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CompanyPharmaDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPharmaDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CompanyPharmaDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CompanyPharmaDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CompanyPharmaDetail(ctx, req.(*CompanyPharmaDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CompanyPharmaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPharmaUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CompanyPharmaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CompanyPharmaUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CompanyPharmaUpdate(ctx, req.(*CompanyPharmaUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CompanyPharmaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPharmaDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CompanyPharmaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CompanyPharmaDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CompanyPharmaDelete(ctx, req.(*CompanyPharmaDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_BrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).BrandList(ctx, req.(*BrandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_BrandCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).BrandCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_BrandCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).BrandCreate(ctx, req.(*BrandCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_BrandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).BrandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_BrandUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).BrandUpdate(ctx, req.(*BrandUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_BrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).BrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_BrandDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).BrandDetail(ctx, req.(*BrandDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_BrandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).BrandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_BrandDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).BrandDelete(ctx, req.(*BrandDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CategoryList(ctx, req.(*CategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CategoryCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CategoryCreate(ctx, req.(*CategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CategoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CategoryUpdate(ctx, req.(*CategoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CategoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CategoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CategoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CategoryDetail(ctx, req.(*CategoryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CategoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CategoryDelete(ctx, req.(*CategoryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ProductTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ProductTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ProductTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ProductTypeList(ctx, req.(*ProductTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SupplierCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SupplierCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SupplierCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SupplierCreate(ctx, req.(*SupplierCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SupplierList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SupplierList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SupplierList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SupplierList(ctx, req.(*SupplierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SupplierDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SupplierDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SupplierDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SupplierDetail(ctx, req.(*SupplierDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SupplierUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SupplierUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SupplierUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SupplierUpdate(ctx, req.(*SupplierUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SupplierDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SupplierDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SupplierDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SupplierDelete(ctx, req.(*SupplierDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_WarehouseCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).WarehouseCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_WarehouseCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).WarehouseCreate(ctx, req.(*WarehouseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_WarehouseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).WarehouseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_WarehouseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).WarehouseList(ctx, req.(*WarehouseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_WarehouseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).WarehouseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_WarehouseDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).WarehouseDetail(ctx, req.(*WarehouseDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_WarehouseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).WarehouseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_WarehouseUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).WarehouseUpdate(ctx, req.(*WarehouseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_WarehouseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).WarehouseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_WarehouseDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).WarehouseDelete(ctx, req.(*WarehouseDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_TicketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).TicketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_TicketCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).TicketCreate(ctx, req.(*TicketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_TicketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).TicketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_TicketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).TicketList(ctx, req.(*TicketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_TicketDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).TicketDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_TicketDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).TicketDetail(ctx, req.(*TicketDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_TicketUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).TicketUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_TicketUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).TicketUpdateStatus(ctx, req.(*TicketUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ConsignmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsignmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ConsignmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ConsignmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ConsignmentList(ctx, req.(*ConsignmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderCreate(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderList(ctx, req.(*OrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderListByMedicalBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMedicalBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderListByMedicalBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderListByMedicalBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderListByMedicalBill(ctx, req.(*OrdersByMedicalBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderDetail(ctx, req.(*OrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderUpdateStatus(ctx, req.(*OrderUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_OrderScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).OrderScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_OrderScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).OrderScan(ctx, req.(*OrderScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreatePaymentItemOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentItemOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreatePaymentItemOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreatePaymentItemOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreatePaymentItemOrder(ctx, req.(*PaymentItemOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerList(ctx, req.(*CustomerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerCreate(ctx, req.(*CustomerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerDetail(ctx, req.(*CustomerDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerUpdate(ctx, req.(*CustomerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerGroupList(ctx, req.(*CustomerGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerGroupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerGroupCreate(ctx, req.(*CustomerGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGroupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerGroupDetail(ctx, req.(*CustomerGroupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerGroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerGroupUpdate(ctx, req.(*CustomerGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CustomerGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CustomerGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CustomerGroupDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CustomerGroupDelete(ctx, req.(*CustomerGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalRecordCreate(ctx, req.(*MedicalRecordCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalRecordCreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MedicalRecordCreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PharmagoServer).MedicalRecordCreateStream(m, &pharmagoMedicalRecordCreateStreamServer{stream})
}

type Pharmago_MedicalRecordCreateStreamServer interface {
	Send(*MedicalRecordCreateResponse) error
	grpc.ServerStream
}

type pharmagoMedicalRecordCreateStreamServer struct {
	grpc.ServerStream
}

func (x *pharmagoMedicalRecordCreateStreamServer) Send(m *MedicalRecordCreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Pharmago_MedicalRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalRecordList(ctx, req.(*MedicalRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalRecordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalRecordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalRecordDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalRecordDelete(ctx, req.(*MedicalRecordDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ImportCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ImportCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ImportCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ImportCompany(ctx, req.(*ImportCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ImportProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ImportProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ImportProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ImportProduct(ctx, req.(*ImportProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ImportProductMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductMasterDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ImportProductMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ImportProductMasterData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ImportProductMasterData(ctx, req.(*ImportProductMasterDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListDebtNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDebtNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListDebtNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListDebtNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListDebtNote(ctx, req.(*ListDebtNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateDebtNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebtNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateDebtNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateDebtNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateDebtNote(ctx, req.(*CreateDebtNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailDebtNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailDebtNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailDebtNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailDebtNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailDebtNote(ctx, req.(*DetailDebtNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ReportDebtNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDebtNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ReportDebtNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ReportDebtNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ReportDebtNote(ctx, req.(*ReportDebtNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateDebtRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebtRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateDebtRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateDebtRepayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateDebtRepayment(ctx, req.(*CreateDebtRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServiceList(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServicesByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServicesByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServicesByCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServicesByCustomer(ctx, req.(*ServicesByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServiceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServiceCreate(ctx, req.(*ServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServiceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServiceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServiceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServiceDetail(ctx, req.(*ServiceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServiceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServiceUpdate(ctx, req.(*ServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ServiceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ServiceDelete(ctx, req.(*ServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ConversationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ConversationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ConversationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ConversationList(ctx, req.(*ListConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MessageList(ctx, req.(*ListMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListMedicalRecord(ctx, req.(*ListMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_CreateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).CreateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_CreateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).CreateMedicalRecord(ctx, req.(*CreateMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailMedicalRecord(ctx, req.(*DetailMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ListNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ListNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ListNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ListNotification(ctx, req.(*ListNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_DetailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).DetailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_DetailNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).DetailNotification(ctx, req.(*DetailNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_SeenAllNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenAllNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).SeenAllNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_SeenAllNoti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).SeenAllNoti(ctx, req.(*SeenAllNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ScheduleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ScheduleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ScheduleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ScheduleCreate(ctx, req.(*AppointmentSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ScheduleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentScheduleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ScheduleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ScheduleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ScheduleList(ctx, req.(*AppointmentScheduleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ScheduleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ScheduleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ScheduleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ScheduleDetail(ctx, req.(*AppointmentSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_ScheduleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).ScheduleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_ScheduleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).ScheduleUpdate(ctx, req.(*AppointmentScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalBillCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalBillCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalBillCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalBillCreate(ctx, req.(*MedicalBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalBillList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalBillListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalBillList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalBillList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalBillList(ctx, req.(*MedicalBillListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalBillDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalBillDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalBillDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalBillDetail(ctx, req.(*MedicalBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_MedicalBillUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalBillUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).MedicalBillUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_MedicalBillUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).MedicalBillUpdate(ctx, req.(*MedicalBillUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PrescriptionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PrescriptionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PrescriptionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PrescriptionCreate(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PrescriptionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrescriptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PrescriptionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PrescriptionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PrescriptionUpdate(ctx, req.(*PrescriptionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PrescriptionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PrescriptionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PrescriptionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PrescriptionDetail(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pharmago_PrescriptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrescriptionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmagoServer).PrescriptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pharmago_PrescriptionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmagoServer).PrescriptionList(ctx, req.(*PrescriptionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pharmago_ServiceDesc is the grpc.ServiceDesc for Pharmago service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pharmago_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Pharmago",
	HandlerType: (*PharmagoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Pharmago_Login_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _Pharmago_CheckToken_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Pharmago_CreateAccount_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _Pharmago_VerifyAccount_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _Pharmago_SendCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Pharmago_VerifyCode_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Pharmago_ResetPassword_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _Pharmago_CheckEmail_Handler,
		},
		{
			MethodName: "CheckPhone",
			Handler:    _Pharmago_CheckPhone_Handler,
		},
		{
			MethodName: "AccountDetail",
			Handler:    _Pharmago_AccountDetail_Handler,
		},
		{
			MethodName: "AccountInactive",
			Handler:    _Pharmago_AccountInactive_Handler,
		},
		{
			MethodName: "AccountList",
			Handler:    _Pharmago_AccountList_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _Pharmago_CreateEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _Pharmago_UpdateEmployee_Handler,
		},
		{
			MethodName: "DetailEmployee",
			Handler:    _Pharmago_DetailEmployee_Handler,
		},
		{
			MethodName: "AssignRoleEmployee",
			Handler:    _Pharmago_AssignRoleEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _Pharmago_DeleteEmployee_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _Pharmago_AppList_Handler,
		},
		{
			MethodName: "RoleCreate",
			Handler:    _Pharmago_RoleCreate_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Pharmago_RoleList_Handler,
		},
		{
			MethodName: "RoleDetail",
			Handler:    _Pharmago_RoleDetail_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Pharmago_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Pharmago_RoleDelete_Handler,
		},
		{
			MethodName: "HomeData",
			Handler:    _Pharmago_HomeData_Handler,
		},
		{
			MethodName: "ReportRevenue",
			Handler:    _Pharmago_ReportRevenue_Handler,
		},
		{
			MethodName: "ReportOrder",
			Handler:    _Pharmago_ReportOrder_Handler,
		},
		{
			MethodName: "ReportCustomer",
			Handler:    _Pharmago_ReportCustomer_Handler,
		},
		{
			MethodName: "ReportCustomerRevenue",
			Handler:    _Pharmago_ReportCustomerRevenue_Handler,
		},
		{
			MethodName: "CreateCompany",
			Handler:    _Pharmago_CreateCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _Pharmago_UpdateCompany_Handler,
		},
		{
			MethodName: "DetailCompany",
			Handler:    _Pharmago_DetailCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _Pharmago_ListCompanies_Handler,
		},
		{
			MethodName: "AssignEmployee",
			Handler:    _Pharmago_AssignEmployee_Handler,
		},
		{
			MethodName: "ListProvinces",
			Handler:    _Pharmago_ListProvinces_Handler,
		},
		{
			MethodName: "ListDistricts",
			Handler:    _Pharmago_ListDistricts_Handler,
		},
		{
			MethodName: "ListWards",
			Handler:    _Pharmago_ListWards_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Pharmago_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Pharmago_UpdateProduct_Handler,
		},
		{
			MethodName: "ListProduct",
			Handler:    _Pharmago_ListProduct_Handler,
		},
		{
			MethodName: "DetailProduct",
			Handler:    _Pharmago_DetailProduct_Handler,
		},
		{
			MethodName: "PromotionByProduct",
			Handler:    _Pharmago_PromotionByProduct_Handler,
		},
		{
			MethodName: "PromotionCheck",
			Handler:    _Pharmago_PromotionCheck_Handler,
		},
		{
			MethodName: "PromotionCreate",
			Handler:    _Pharmago_PromotionCreate_Handler,
		},
		{
			MethodName: "ListVariant",
			Handler:    _Pharmago_ListVariant_Handler,
		},
		{
			MethodName: "VariantsCustomerBuy",
			Handler:    _Pharmago_VariantsCustomerBuy_Handler,
		},
		{
			MethodName: "GetPriceList",
			Handler:    _Pharmago_GetPriceList_Handler,
		},
		{
			MethodName: "DetailPriceList",
			Handler:    _Pharmago_DetailPriceList_Handler,
		},
		{
			MethodName: "UpdatePriceList",
			Handler:    _Pharmago_UpdatePriceList_Handler,
		},
		{
			MethodName: "ClassifyList",
			Handler:    _Pharmago_ClassifyList_Handler,
		},
		{
			MethodName: "ProductionStandardList",
			Handler:    _Pharmago_ProductionStandardList_Handler,
		},
		{
			MethodName: "ProductionStandardCreate",
			Handler:    _Pharmago_ProductionStandardCreate_Handler,
		},
		{
			MethodName: "ProductionStandardDetail",
			Handler:    _Pharmago_ProductionStandardDetail_Handler,
		},
		{
			MethodName: "ProductionStandardUpdate",
			Handler:    _Pharmago_ProductionStandardUpdate_Handler,
		},
		{
			MethodName: "ProductionStandardDelete",
			Handler:    _Pharmago_ProductionStandardDelete_Handler,
		},
		{
			MethodName: "PreparationTypeList",
			Handler:    _Pharmago_PreparationTypeList_Handler,
		},
		{
			MethodName: "PreparationTypeCreate",
			Handler:    _Pharmago_PreparationTypeCreate_Handler,
		},
		{
			MethodName: "PreparationTypeDetail",
			Handler:    _Pharmago_PreparationTypeDetail_Handler,
		},
		{
			MethodName: "PreparationTypeUpdate",
			Handler:    _Pharmago_PreparationTypeUpdate_Handler,
		},
		{
			MethodName: "PreparationTypeDelete",
			Handler:    _Pharmago_PreparationTypeDelete_Handler,
		},
		{
			MethodName: "CompanyPharmaList",
			Handler:    _Pharmago_CompanyPharmaList_Handler,
		},
		{
			MethodName: "CompanyPharmaCreate",
			Handler:    _Pharmago_CompanyPharmaCreate_Handler,
		},
		{
			MethodName: "CompanyPharmaDetail",
			Handler:    _Pharmago_CompanyPharmaDetail_Handler,
		},
		{
			MethodName: "CompanyPharmaUpdate",
			Handler:    _Pharmago_CompanyPharmaUpdate_Handler,
		},
		{
			MethodName: "CompanyPharmaDelete",
			Handler:    _Pharmago_CompanyPharmaDelete_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _Pharmago_BrandList_Handler,
		},
		{
			MethodName: "BrandCreate",
			Handler:    _Pharmago_BrandCreate_Handler,
		},
		{
			MethodName: "BrandUpdate",
			Handler:    _Pharmago_BrandUpdate_Handler,
		},
		{
			MethodName: "BrandDetail",
			Handler:    _Pharmago_BrandDetail_Handler,
		},
		{
			MethodName: "BrandDelete",
			Handler:    _Pharmago_BrandDelete_Handler,
		},
		{
			MethodName: "CategoryList",
			Handler:    _Pharmago_CategoryList_Handler,
		},
		{
			MethodName: "CategoryCreate",
			Handler:    _Pharmago_CategoryCreate_Handler,
		},
		{
			MethodName: "CategoryUpdate",
			Handler:    _Pharmago_CategoryUpdate_Handler,
		},
		{
			MethodName: "CategoryDetail",
			Handler:    _Pharmago_CategoryDetail_Handler,
		},
		{
			MethodName: "CategoryDelete",
			Handler:    _Pharmago_CategoryDelete_Handler,
		},
		{
			MethodName: "ProductTypeList",
			Handler:    _Pharmago_ProductTypeList_Handler,
		},
		{
			MethodName: "SupplierCreate",
			Handler:    _Pharmago_SupplierCreate_Handler,
		},
		{
			MethodName: "SupplierList",
			Handler:    _Pharmago_SupplierList_Handler,
		},
		{
			MethodName: "SupplierDetail",
			Handler:    _Pharmago_SupplierDetail_Handler,
		},
		{
			MethodName: "SupplierUpdate",
			Handler:    _Pharmago_SupplierUpdate_Handler,
		},
		{
			MethodName: "SupplierDelete",
			Handler:    _Pharmago_SupplierDelete_Handler,
		},
		{
			MethodName: "WarehouseCreate",
			Handler:    _Pharmago_WarehouseCreate_Handler,
		},
		{
			MethodName: "WarehouseList",
			Handler:    _Pharmago_WarehouseList_Handler,
		},
		{
			MethodName: "WarehouseDetail",
			Handler:    _Pharmago_WarehouseDetail_Handler,
		},
		{
			MethodName: "WarehouseUpdate",
			Handler:    _Pharmago_WarehouseUpdate_Handler,
		},
		{
			MethodName: "WarehouseDelete",
			Handler:    _Pharmago_WarehouseDelete_Handler,
		},
		{
			MethodName: "TicketCreate",
			Handler:    _Pharmago_TicketCreate_Handler,
		},
		{
			MethodName: "TicketList",
			Handler:    _Pharmago_TicketList_Handler,
		},
		{
			MethodName: "TicketDetail",
			Handler:    _Pharmago_TicketDetail_Handler,
		},
		{
			MethodName: "TicketUpdateStatus",
			Handler:    _Pharmago_TicketUpdateStatus_Handler,
		},
		{
			MethodName: "ConsignmentList",
			Handler:    _Pharmago_ConsignmentList_Handler,
		},
		{
			MethodName: "OrderCreate",
			Handler:    _Pharmago_OrderCreate_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _Pharmago_OrderList_Handler,
		},
		{
			MethodName: "OrderListByMedicalBill",
			Handler:    _Pharmago_OrderListByMedicalBill_Handler,
		},
		{
			MethodName: "OrderDetail",
			Handler:    _Pharmago_OrderDetail_Handler,
		},
		{
			MethodName: "OrderUpdateStatus",
			Handler:    _Pharmago_OrderUpdateStatus_Handler,
		},
		{
			MethodName: "OrderScan",
			Handler:    _Pharmago_OrderScan_Handler,
		},
		{
			MethodName: "CreatePaymentItemOrder",
			Handler:    _Pharmago_CreatePaymentItemOrder_Handler,
		},
		{
			MethodName: "CustomerList",
			Handler:    _Pharmago_CustomerList_Handler,
		},
		{
			MethodName: "CustomerCreate",
			Handler:    _Pharmago_CustomerCreate_Handler,
		},
		{
			MethodName: "CustomerDetail",
			Handler:    _Pharmago_CustomerDetail_Handler,
		},
		{
			MethodName: "CustomerUpdate",
			Handler:    _Pharmago_CustomerUpdate_Handler,
		},
		{
			MethodName: "CustomerGroupList",
			Handler:    _Pharmago_CustomerGroupList_Handler,
		},
		{
			MethodName: "CustomerGroupCreate",
			Handler:    _Pharmago_CustomerGroupCreate_Handler,
		},
		{
			MethodName: "CustomerGroupDetail",
			Handler:    _Pharmago_CustomerGroupDetail_Handler,
		},
		{
			MethodName: "CustomerGroupUpdate",
			Handler:    _Pharmago_CustomerGroupUpdate_Handler,
		},
		{
			MethodName: "CustomerGroupDelete",
			Handler:    _Pharmago_CustomerGroupDelete_Handler,
		},
		{
			MethodName: "MedicalRecordCreate",
			Handler:    _Pharmago_MedicalRecordCreate_Handler,
		},
		{
			MethodName: "MedicalRecordList",
			Handler:    _Pharmago_MedicalRecordList_Handler,
		},
		{
			MethodName: "MedicalRecordDelete",
			Handler:    _Pharmago_MedicalRecordDelete_Handler,
		},
		{
			MethodName: "ImportCompany",
			Handler:    _Pharmago_ImportCompany_Handler,
		},
		{
			MethodName: "ImportProduct",
			Handler:    _Pharmago_ImportProduct_Handler,
		},
		{
			MethodName: "ImportProductMasterData",
			Handler:    _Pharmago_ImportProductMasterData_Handler,
		},
		{
			MethodName: "ListDebtNote",
			Handler:    _Pharmago_ListDebtNote_Handler,
		},
		{
			MethodName: "CreateDebtNote",
			Handler:    _Pharmago_CreateDebtNote_Handler,
		},
		{
			MethodName: "DetailDebtNote",
			Handler:    _Pharmago_DetailDebtNote_Handler,
		},
		{
			MethodName: "ReportDebtNote",
			Handler:    _Pharmago_ReportDebtNote_Handler,
		},
		{
			MethodName: "CreateDebtRepayment",
			Handler:    _Pharmago_CreateDebtRepayment_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _Pharmago_ServiceList_Handler,
		},
		{
			MethodName: "ServicesByCustomer",
			Handler:    _Pharmago_ServicesByCustomer_Handler,
		},
		{
			MethodName: "ServiceCreate",
			Handler:    _Pharmago_ServiceCreate_Handler,
		},
		{
			MethodName: "ServiceDetail",
			Handler:    _Pharmago_ServiceDetail_Handler,
		},
		{
			MethodName: "ServiceUpdate",
			Handler:    _Pharmago_ServiceUpdate_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _Pharmago_ServiceDelete_Handler,
		},
		{
			MethodName: "ConversationList",
			Handler:    _Pharmago_ConversationList_Handler,
		},
		{
			MethodName: "MessageList",
			Handler:    _Pharmago_MessageList_Handler,
		},
		{
			MethodName: "ListMedicalRecord",
			Handler:    _Pharmago_ListMedicalRecord_Handler,
		},
		{
			MethodName: "CreateMedicalRecord",
			Handler:    _Pharmago_CreateMedicalRecord_Handler,
		},
		{
			MethodName: "DetailMedicalRecord",
			Handler:    _Pharmago_DetailMedicalRecord_Handler,
		},
		{
			MethodName: "ListNotification",
			Handler:    _Pharmago_ListNotification_Handler,
		},
		{
			MethodName: "DetailNotification",
			Handler:    _Pharmago_DetailNotification_Handler,
		},
		{
			MethodName: "SeenAllNoti",
			Handler:    _Pharmago_SeenAllNoti_Handler,
		},
		{
			MethodName: "ScheduleCreate",
			Handler:    _Pharmago_ScheduleCreate_Handler,
		},
		{
			MethodName: "ScheduleList",
			Handler:    _Pharmago_ScheduleList_Handler,
		},
		{
			MethodName: "ScheduleDetail",
			Handler:    _Pharmago_ScheduleDetail_Handler,
		},
		{
			MethodName: "ScheduleUpdate",
			Handler:    _Pharmago_ScheduleUpdate_Handler,
		},
		{
			MethodName: "MedicalBillCreate",
			Handler:    _Pharmago_MedicalBillCreate_Handler,
		},
		{
			MethodName: "MedicalBillList",
			Handler:    _Pharmago_MedicalBillList_Handler,
		},
		{
			MethodName: "MedicalBillDetail",
			Handler:    _Pharmago_MedicalBillDetail_Handler,
		},
		{
			MethodName: "MedicalBillUpdate",
			Handler:    _Pharmago_MedicalBillUpdate_Handler,
		},
		{
			MethodName: "PrescriptionCreate",
			Handler:    _Pharmago_PrescriptionCreate_Handler,
		},
		{
			MethodName: "PrescriptionUpdate",
			Handler:    _Pharmago_PrescriptionUpdate_Handler,
		},
		{
			MethodName: "PrescriptionDetail",
			Handler:    _Pharmago_PrescriptionDetail_Handler,
		},
		{
			MethodName: "PrescriptionList",
			Handler:    _Pharmago_PrescriptionList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScanVariant",
			Handler:       _Pharmago_ScanVariant_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MedicalRecordCreateStream",
			Handler:       _Pharmago_MedicalRecordCreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_pharmago.proto",
}
