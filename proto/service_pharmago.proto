syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "rpc/rpc_login.proto";
import "rpc/rpc_create_account.proto";
import "rpc/rpc_verify_account.proto";
import "rpc/address/rpc_provinces.proto";
import "rpc/address/rpc_districts.proto";
import "rpc/address/rpc_wards.proto";
import "rpc/company/rpc_create_company.proto";
import "rpc/company/rpc_companies.proto";
import "rpc/product/rpc_create_product.proto";
import "rpc/product/rpc_list_product.proto";
import "rpc/product/rpc_price_list.proto";
import "rpc/product/rpc_detail_price_list.proto";
import "rpc/product/rpc_update_price_list.proto";
import "rpc/product/rpc_brand_list.proto";
import "rpc/product/rpc_category_list.proto";
import "rpc/product/rpc_product_type_list.proto";
import "rpc/product/rpc_classify_list.proto";
import "rpc/product/rpc_production_standard_list.proto";
import "rpc/product/rpc_preparation_type_list.proto";
import "rpc/product/rpc_company_pharma_list.proto";
import "rpc/product/rpc_variant_list.proto";

import "rpc/warehouse/rpc_ticket_create.proto";
import "rpc/warehouse/rpc_ticker_list.proto";
import "rpc/warehouse/rpc_consignment_list.proto";
import "rpc/warehouse/rpc_warehouse_create.proto";
import "rpc/warehouse/rpc_warehouse_list.proto";
import "rpc/warehouse/rpc_ticket_update_status.proto";
import "rpc/warehouse/rpc_suplier_list.proto";
import "rpc/warehouse/rpc_ticket_detail.proto";

import "rpc/order/rpc_order_create.proto";
import "rpc/order/rpc_order_list.proto";
import "rpc/order/rpc_order_detail.proto";
import "rpc/order/rpc_order_update_status.proto";

import "rpc/customer/rpc_customer_list.proto";

import "rpc/supplier/rpc_supplier_create.proto";
import "rpc/supplier/rpc_supplier_detail.proto";
import "rpc/supplier/rpc_supplier_update.proto";

import "rpc/rpc_import_company.proto";
import "rpc/rpc_import_product.proto";
import "rpc/rpc_import_product_master_data.proto";


option go_package = "github.com/HoangLong2502/pharmago_be/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "A Bit of Everything";
    version: "1.0";
    contact: {
      name: "Pharmago_Be";
      url: "https://github.com/grpc-ecosystem/grpc-gateway";
      email: "long.lbg@idtinc.co";
    };
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service Pharmago {
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/account/v1/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login User";
      tags: "Account";
      security: {};
    };
  };
  rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/account/v1/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create new Account";
      tags: "Account";
      security: {};
    };
  };
  rpc VerifyAccount (VerifyAccountRequest) returns (VerifyAccountResponse) {
    option (google.api.http) = {
      post: "/account/v1/verify"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Verify new Account";
      tags: "Account";
      security: {};
    };
  };

  rpc CreateCompany (CreateCompanyRequest) returns (CreateCompanyResponse) {
    option (google.api.http) = {
      post: "/company/v1/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create new user";
      tags: "Company";
    };
  };

  rpc ListCompanies (GetCompaniesRequest) returns (GetCompaniesResponse) {
    option (google.api.http) = {
      get: "/company/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get list company";
      tags: "Company";
    };
  };

  rpc ListProvinces (ProvincesRequest) returns (ProvincesResponse) {
    option (google.api.http) = {
      post: "/address/v1/province"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get list province";
      tags: "Address";
    };
  };

  rpc ListDistricts (DistrictsRequest) returns (DistrictsResponse) {
    option (google.api.http) = {
      post: "/address/v1/district"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get list district";
      tags: "Address";
    };
  };

  rpc ListWards (WardsRequest) returns (WardsResponse) {
    option (google.api.http) = {
      post: "/address/v1/ward"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get list ward";
      tags: "Address";
    };
  };

  // ==================== PRODUCT ========================
  rpc CreateProduct (CreateProductRequest) returns (CreateProductResponse) {
    option (google.api.http) = {
      post: "/product/v1/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create New Product";
      tags: "Product";
    };
  };

  rpc ListProduct (ListProductRequest) returns (ListProductResponse) {
    option (google.api.http) = {
      get: "/product/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create New Product";
      tags: "Product";
    };
  };

  // -------- VARIANT --------
  rpc ListVariant (ListVariantRequest) returns (ListVariantResponse) {
    option (google.api.http) = {
      get: "/product/v1/variant/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get List Variant";
      tags: "Product";
    };
  };


  // -------- PRICE_LIST --------
  rpc GetPriceList (PriceListRequest) returns (PriceListResponse) {
    option (google.api.http) = {
      get: "/price_list/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Price list";
      tags: "Price List";
    };
  };

  rpc DetailPriceList (DetailPriceListRequest) returns (DetailPriceListResponse) {
    option (google.api.http) = {
      get: "/price_list/v1/detail/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Detail Price list";
      tags: "Price List";
    };
  };

  rpc UpdatePriceList (UpdatePriceListRequest) returns (UpdatePriceListResponse) {
    option (google.api.http) = {
      put: "/price_list/v1/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Price list";
      tags: "Price List";
    };
  };

  // ================== PRODUCT MASTER DATA ===================
  rpc ClassifyList (ClassifyListRequest) returns (ClassifyListResponse) {
    option (google.api.http) = {
      get: "/classify/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List classify";
      tags: "Product Master Data";
    };
  };

  rpc ProductionStandardList (ProductionStandardListRequest) returns (ProductionStandardListResponse) {
    option (google.api.http) = {
      get: "/production_standard/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List production standard";
      tags: "Product Master Data";
    };
  };

  rpc PreparationTypeList (PreparationTypeListRequest) returns (PreparationTypeListResponse) {
    option (google.api.http) = {
      get: "/preparation_type/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List preparation type";
      tags: "Product Master Data";
    };
  };

  rpc CompanyPharmaList (CompanyPharmaListRequest) returns (CompanyPharmaListResponse) {
    option (google.api.http) = {
      get: "/company_pharma/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List company pharma";
      tags: "Product Master Data";
    };
  };

  // ================== BRAND ===================
  rpc BrandList (BrandListRequest) returns (BrandListResponse) {
    option (google.api.http) = {
      get: "/brand/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List brand";
      tags: "Product Brand";
    };
  };

  // ================== CATEGORY ===================
  rpc CategoryList (CategoryListRequest) returns (CategoryListResponse) {
    option (google.api.http) = {
      get: "/category/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List category";
      tags: "Product Category";
    };
  };

  // ================== PRODUCT_TYPE ===================
  rpc ProductTypeList (ProductTypeListRequest) returns (ProductTypeListResponse) {
    option (google.api.http) = {
      get: "/product_type/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List product type";
      tags: "Product Type";
    };
  };

  // TODO: ================== SUPPLIER ===================
  rpc SupplierCreate (SupplierCreateRequest) returns (SupplierCreateResponse) {
    option (google.api.http) = {
      post: "/supplier/v1/create",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Supplier";
      tags: "Supplier";
    };
  };
  rpc SupplierList (SupplierListRequest) returns (SupplierListResponse) {
    option (google.api.http) = {
      get: "/supplier/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Supplier";
      tags: "Supplier";
    };
  };
  rpc SupplierDetail (SupplierDetailRequest) returns (SupplierDetailResponse) {
    option (google.api.http) = {
      get: "/supplier/v1/supplier/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Detail Supplier";
      tags: "Supplier";
    };
  };
  rpc SupplierUpdate (SupplierUpdateRequest) returns (SupplierUpdateResponse) {
    option (google.api.http) = {
      put: "/supplier/v1/supplier/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Supplier";
      tags: "Supplier";
    };
  };

  // ================== WAREHOUSE ===================
  rpc WarehouseCreate (WarehouseCreateRequest) returns (WarehouseCreateResponse) {
    option (google.api.http) = {
      post: "/warehouse/v1/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create warehouse";
      description: "code: optional";
      tags: "Warehouse";
    };
  };
  rpc WarehouseList (WarehouseListRequest) returns (WarehouseListResponse) {
    option (google.api.http) = {
      get: "/warehouse/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "list warehouses";
      tags: "Warehouse";
    };
  };
  rpc TicketCreate (TicketCreateRequest) returns (TicketCreateResponse) {
    option (google.api.http) = {
      post: "/warehouse/v1/ticket/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create ticket";
      description: "type: ['IMPORT', 'EXPORT']\nstatus: ['NEW', 'IN_PROCESS', 'COMPLETE', 'CANCEL']\ncode: optional\nexportTo: id address\nimportFrom: id address";
      tags: "Warehouse";
    };
  };
  rpc TicketList (TicketListRequest) returns (TicketListResponse) {
    option (google.api.http) = {
      get: "/warehouse/v1/ticket"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "list ticket";
      tags: "Warehouse";
    };
  };
  rpc TicketDetail (TicketDetailRequest) returns (TicketDetailResponse) {
    option (google.api.http) = {
      get: "/warehouse/v1/ticket/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "detail ticket";
      tags: "Warehouse";
    };
  };
  rpc TicketUpdateStatus (TicketUpdateStatusRequest) returns (TicketUpdateStatusResponse) {
    option (google.api.http) = {
      put: "/warehouse/v1/ticket/update_status"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update ticket status";
      description: "type: ['IMPORT', 'EXPORT']\nstatus: ['NEW', 'IN_PROCESS', 'COMPLETE', 'CANCEL']\ncode: optional\nexportTo: id address\nimportFrom: id address";
      tags: "Warehouse";
    };
  };
  rpc ConsignmentList (ConsignmentListRequest) returns (ConsignmentListResponse) {
    option (google.api.http) = {
      get: "/warehouse/v1/consignment/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get list consignment";
      tags: "Warehouse";
    };
  };

  // ================== ORDER ===================
  rpc OrderCreate (OrderCreateRequest) returns (OrderCreateResponse) {
    option (google.api.http) = {
      post: "/order/v1/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Order";
      tags: "Order";
    };
  };
  rpc OrderList (OrderListRequest) returns (OrderListResponse) {
    option (google.api.http) = {
      get: "/order/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Order";
      tags: "Order";
    };
  };
  rpc OrderDetail (OrderDetailRequest) returns (OrderDetailResponse) {
    option (google.api.http) = {
      get: "/order/v1/order/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Detail Order";
      tags: "Order";
    };
  };
  rpc OrderUpdateStatus (OrderUpdateStatusRequest) returns (OrderUpdateStatusResponse) {
    option (google.api.http) = {
      put: "/order/v1/order/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Status Order";
      tags: "Order";
    };
  };

  // ================== CUSTOMER ===================
  rpc CustomerList (CustomerListRequest) returns (CustomerListResponse) {
    option (google.api.http) = {
      get: "/customer/v1/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List customer";
      tags: "Customer";
    };
  };

  // ================== IMPORT ===================
  rpc ImportCompany (ImportCompanyRequest) returns (ImportCompanyResponse) {
    option (google.api.http) = {
      get: "/import/v1/company"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Import Data company pharma";
      tags: "Import Master Data";
    };
  };
  rpc ImportProduct (ImportProductRequest) returns (ImportProductResponse) {
    option (google.api.http) = {
      get: "/import/v1/product"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Import Data Product pharma";
      tags: "Import Master Data";
    };
  };
  rpc ImportProductMasterData (ImportProductMasterDataRequest) returns (ImportProductMasterDataResponse) {
    option (google.api.http) = {
      get: "/import/v1/product_master_data"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Import product data master pharma";
      tags: "Import Master Data";
    };
  };
}